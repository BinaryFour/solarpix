{"version":3,"sources":["apis/files.js","components/InputForm.js","components/pages/CreateJob.js","actions/index.js","actions/types.js","components/Footer.js","components/pages/CategoryList.js","database/db.js","components/Camera.js","apis/uploadImage.js","components/pages/CategoryEdit.js","components/Modal.js","components/pages/DeleteJob.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/categoriesReducer.js","reducers/toUploadReducer.js","reducers/clearStorageReducer.js","index.js","localStorage.js","categoryListFile"],"names":["axios","create","baseURL","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","projectName","profileName","CreateJob","state","toCategories","createNewJob","setState","Redirect","to","components_InputForm","initialValues","connect","dispatch","type","payload","profile","Footer","links","map","link","Link","path","key","id","classname","length","renderList","CategoryList","localStorage","getItem","includes","readTextFile","categoryListFile","err","categories","category","title","style","float","marginLeft","textAlign","photoQty","description","marginBottom","components_Footer","values","textFile","asyncToGenerator","regenerator_default","mark","_callee2","categoryArray","counter","wrap","_context2","prev","next","files","get","sent","data","split","forEach","tempArray","obj","photoQueue","push","stop","_x3","apply","arguments","db","Dexie","version","stores","photoDb","styles","display","Camera","handleImage","event","target","onChange","accept","htmlFor","uploadImage","_callee","image","config","formData","_context","auth","username","password","crossDomain","FormData","append","post","abrupt","_x","CategoryEdit","categoryId","match","params","imageTitle","imageId","imageQty","thumbnails","onClick","console","log","onAddPhoto","img","renamedFile","lastModified","File","saveToDb","then","response","updateStatusTrue","getThumbnails","catch","uploadPhoto","add","photoId","fileName","uploadStatus","photo","_callee3","_context3","update","_callee4","collection","_context4","where","startsWith","count","toArray","updatePhotoQty","getCategory","_this2","imageURL","URL","createObjectURL","src","alt","components_Camera","ownProps","newJob","getState","addPhoto","Modal","ReactDOM","createPortal","e","stopPropagation","content","actions","document","querySelector","DeleteJob","cancel","toPath","resetData","clearLocalStorage","delete","Fragment","_this3","es_Redirect","components_Modal","renderActions","onDismiss","window","clear","App","marginTop","HashRouter","Route","exact","INITIAL_STATE","appReducer","combineReducers","formReducer","undefined","action","objectSpread","_","mapKeys","defineProperty","uploadQueue","clearStorage","rootReducer","persistedState","localState","JSON","parse","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","es","components_App","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8f6ccd82.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'http://localhost:3000'\r\n})\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"solar\">Solar</option>\r\n          <option value=\"site-audit\">Site-Audit</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Name\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName){\r\n    errors.userName = 'You must enter a User Name';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { createNewJob } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = { toCategories: false }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list\r\n  onSubmit = (formValues) => {\r\n    this.props.createNewJob(formValues);\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true });\r\n\r\n    //history.push('/categories');\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories === true){\r\n      return <Redirect to='/categories' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'solar'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import files from '../apis/files';\n//types.js just has action name/types for easier bug catching\nimport {\n  CREATE_JOB,\n  READ_TXT_FILE,\n  GEN_DUMMY,\n  GET_CATEGORY,\n  ADD_PHOTO,\n  TO_UPLOAD,\n  UPLOAD_IMAGE,\n  UPDATE_PHOTOQTY,\n  CLEAR_LOCALSTORAGE\n} from './types';\n\nexport const clearLocalStorage = () => {\n  const response = window.localStorage.clear();\n\n  return{\n    type: CLEAR_LOCALSTORAGE,\n    payload: {}\n  }\n}\n\n//UNUSED\nexport const uploadImage = (image) => async (dispatch, getState) => {\n\n  //Set up necessary parameters for POST to EmPower server\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\n  //const params = { name: 'upload', filname: 'test_Filename' }\n  const url = 'http://upload.empower-solar.com/index2.php';\n\n  //Set up necessary parameters for CORS proxy\n  /*\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  await fetch(proxyurl + url)\n  .then(response => response.text())\n  .then(contents => console.log(contents))\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\n  */\n  const config = {\n    auth: authParam\n  }\n\n  const formData = new FormData();\n  formData.append('upload',image);\n\n  try{\n    const response = await files.post(url, formData, config);\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\n  }\n  catch(err){\n    console.log('POST failed: ', err);\n  }\n\n};\n\n\nexport const updatePhotoQty = (id, photoQty) => {\n  return{\n    type: UPDATE_PHOTOQTY,\n    payload: {\n      id: id,\n      photoQty: photoQty\n    }\n  }\n}\n\n//UNUSED\n//Add image to uploadQueue\nexport const toUploadQueue = (id, dataURL) => {\n\n  return {\n    type: TO_UPLOAD,\n    payload: {\n      id: id,\n      dataURL: dataURL,\n      uploadStatus: false\n    }\n  }\n}\n\n//UNUSED\n//Adds photo to photoQueue for specific category\nexport const addPhoto = (id, photoQty, photoQueue) => {\n\n  return{\n    type: ADD_PHOTO,\n    payload: {\n      id: id,\n      photoQty: photoQty,\n      photoQueue: photoQueue\n    }\n  }\n\n}\n\n//Submit button saves NewJob data and navigates user to category list\nexport const createNewJob = (userName, projectName, profileName) => dispatch => {\n\n  dispatch({ type: CREATE_JOB, payload: {userName: userName, projectName: projectName, profile: profileName }});\n  //history.push('/categories');\n}\n\n//Reads text file using axios.\n//Waits for response before dispatching action\n//Splits response into objects with proper properties\nexport const readTextFile = (textFile) => async dispatch => {\n    var categoryArray = [];\n    var counter = 0;\n    //get categories file from component\n    const response = await files.get(textFile);\n    //create array of strings\n    var textArray = response.data.split(/\\n/);\n    //For each String, split string into id/title/description properties\n    //id generated by counter (dynamic for categorylist future proofing)\n    textArray.forEach( category => {\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\n      if(category){\n        var tempArray = category.split(\"|\");\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, photoQueue: [] };\n        categoryArray.push(obj);\n        counter += 1;\n      }\n    });\n    //console.log(categoryArray);\n\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\n}\n\n//Gets individual category data from store\nexport const getCategory = (id) => (dispatch, getState) => {\n  const category = getState().categories[id];\n  //console.log(category);\n\n  dispatch({ type: GET_CATEGORY, payload: category });\n}\n\n//Dev action creator, unnecessary\n//Provides dummy values (set up before getting readTextFile wired)\nexport const genDummyValues = () => {\n  return{\n    type: GEN_DUMMY,\n    payload:\n      [\n        {id:0, title:'Category 1', description: 'a1'},\n        {id:1, title:'Category 2', description: 'a2'},\n        {id:2, title:'Category 3', description: 'a3'},\n        {id:3, title:'Category 1', description: 'a1'},\n        {id:4, title:'Category 2', description: 'a2'},\n        {id:5, title:'Category 3', description: 'a3'},\n        {id:6, title:'Category 1', description: 'a1'},\n        {id:7, title:'Category 2', description: 'a2'},\n        {id:8, title:'Category 3', description: 'a3'},\n        {id:9, title:'Category 1', description: 'a1'},\n        {id:10, title:'Category 2', description: 'a2'},\n        {id:11, title:'Category 3', description: 'a3'}\n      ]\n  }\n}\n","export const CREATE_JOB = 'CREATE_JOB';\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\nexport const GEN_DUMMY = 'GEN_DUMMY';\nexport const GET_CATEGORY = 'GET_CATEGORY';\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\nexport const ADD_PHOTO = 'ADD_PHOTO';\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\nexport const TO_UPLOAD = 'TO_UPLOAD';\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\nexport const CLEAR_LOCALSTORAGE = 'CLEAR_LOCALSTORAGE';\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return (\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile from '../../categoryListFile';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/delete', id: 'newJob', label: 'New Job' }\r\n]\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //If there is no localStorage, read text file and create categories.  Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"categories\":{}`)){\r\n        this.props.readTextFile(categoryListFile);\r\n      }\r\n\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      this.props.readTextFile(categoryListFile);\r\n    }\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n          <Link to={`/categories/${category.id}`} className=\"item\" key={category.id}>\r\n            <i className=\"large middle aligned icon camera\" />\r\n            <div className=\"content\">\r\n              {category.title}\r\n              <div style={{ float: 'right', marginLeft: '10px' }}>\r\n                Taken Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n            </div>\r\n          </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\" style={{ marginBottom: '48px'}}>{this.renderList()}</div>\r\n        <Footer links={links}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return{\r\n    categories: Object.values(state.categories),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile })(CategoryList);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\ndb.version(1).stores({\r\n    photoDb: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass Camera extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui button large primary\" htmlFor=\"file\">Take Photo</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;\r\n","import files from '../apis/files';\r\n\r\nconst uploadImage = async (image) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return await files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","/*\nCategoryEdit - Individual Category look\n\nPurpose:\nUser able to take photos and edit existing photos for this category.\n\nPhoto file title syntax \"title_imgQty\"\n\n*/\n\n/*\n// TODO:\nSeparate rows of photos for User-Friendliness\n*/\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getCategory, addPhoto, updatePhotoQty } from '../../actions';\n\n//import { toDataUrl } from '../toDataUrl';\nimport db from '../../database/db';\nimport Camera from '../Camera';\nimport Footer from '../Footer';\nimport uploadImage from '../../apis/uploadImage';\n\n//Used for footer\nconst links = [\n  { path: '/categories', id:'categoryList', label: 'Back' }\n];\n//import categoryListFile from '../../categoryListFile';\n\nclass CategoryEdit extends React.Component {\n\n  state = { categoryId: this.props.match.params.id, imageTitle: '', imageId:'', imageQty: '', thumbnails: [] };\n\n  //Fetch the category data from store\n  //Get the photoQty and existing thumbnails\n\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\n  componentDidMount(){\n    this.props.getCategory(this.state.categoryId);\n    this.getThumbnails();\n  }\n\n  //When user clicks on existing photo, open modal\n  //TODO: modal options (re-take or delete)\n  onClick = (id) => {\n    console.log(`user clicked existing image: ${id}`);\n  }\n\n  //callback to Camera to get Added photo file.  Create photo file name\n  onAddPhoto = async (img) => {\n    if(img){\n      const formValues = this.props.formValues;\n      const imageQty = this.state.imageQty + 1;\n      const imageTitle = `${formValues.projectName}_${this.props.category.title}_${imageQty}_${formValues.userName}`;\n      const imageId = `${this.state.categoryId}_${img.lastModified}`;\n      //Set current imageId to lastmodified date and rename file\n      const renamedFile = new File([img], imageTitle+'.jpeg', {type: img.type} );\n      //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\n      await this.setState({ imageTitle: imageTitle, imageId: imageId });\n      //Save file to db, upload photo to server, refresh current page w/ thumbnails\n      this.saveToDb(renamedFile);\n      uploadImage(renamedFile)\n      .then(response => {\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\n        this.updateStatusTrue();\n        this.getThumbnails();\n      })\n      .catch(error => {\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\n      });\n\n    }\n    else{\n      //If user cancelled, don't do anything\n      console.log('User cancelled image take');\n    }\n  }\n\n  //Uploads photo\n  //TODO:  finish reducer w/ uploadStatus change\n  uploadPhoto = (img) => {\n    this.props.uploadImage(img);\n  }\n\n  //Database helper methods\n  //Is there a way to create an async function that can use props?\n\n  //Saves image to db\n  saveToDb = async (img) => {\n    await db.photoDb.add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: false, photo: img });\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\n  }\n\n  updateStatusTrue = async () => {\n    await db.photoDb.update(this.state.imageId, { uploadStatus: true });\n  }\n\n  //Access db and return count: number of photos in category\n  //put thumbnails in state thumbnails and display\n  getThumbnails = async () => {\n    console.log('Enter thumbnails, ')\n    const categoryId = this.state.categoryId;\n    const photoQty = await db.photoDb.where('photoId').startsWith(categoryId).count();\n    //TODO: figure out how to catch await errors\n    if (photoQty > 0){\n      //getThumbnails\n      const collection = await db.photoDb.where('photoId').startsWith(categoryId);\n      const response = await collection.toArray();\n      this.setState({ thumbnails: response });\n    }\n    //Update store w/ photoQty value and rerender\n    this.props.updatePhotoQty(categoryId, photoQty);\n    this.setState({ imageQty: photoQty });\n  }\n\n  //render list of photos\n  //Id doesn't update for repeat file upload.\n  renderList() {\n    console.log(this.state.thumbnails);\n    return this.state.thumbnails.map( image => {\n      if(image){\n        const imageURL = URL.createObjectURL(image.photo);\n        return(\n          <div className=\"item\" key={image.photoId}>\n            <img onClick={this.onClick} className=\"ui small rounded centered image\" src={imageURL} alt=\"\"/>\n            <div className=\"content\">\n              <div className=\"description\"></div>\n            </div>\n          </div>\n        );\n      };\n      return <div></div>;\n    });\n  }\n\n  render(){\n    return(\n      <div>\n        <h2>{this.props.category.title}</h2>\n        <h3>{this.props.category.description}</h3>\n        <Camera onSubmit={this.onAddPhoto}/>\n        <h3>Photos: {this.state.imageQty}</h3>\n        <div className=\"ui huge horizontal selection celled list\">\n          {this.renderList()}\n        </div>\n        <Footer links={links} />\n      </div>\n    );\n  }\n}\n\n//Put category data into category props\nconst mapStateToProps = (state, ownProps) => {\n  return{\n    category: (Object.values(state.categories))[ownProps.match.params.id],\n    formValues: state.newJob.userName\n  };\n}\n\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty })(CategoryEdit);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\">\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { clearLocalStorage } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    this.props.clearLocalStorage();\r\n    console.log('Storage should be cleared: ',localStorage.getItem(\"state\"));\r\n    await db.delete();\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">New Job</button>\r\n        <Link to=\"/categories\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/categories\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        DeleteJob\r\n        <Modal\r\n          title='Delete old photos?'\r\n          content='If you create a new job, you will lose all the photos you took from your previous session.  Delete photos and create a new job?'\r\n          path='/categories'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default connect(null, { clearLocalStorage })(DeleteJob);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"ui container\" style={{ marginTop: '10px'}}>\r\n      <HashRouter>\r\n        <div>\r\n          <Route path=\"/\" exact component={CreateJob}/>\r\n          <Route path=\"/categories\" exact component={CategoryList}/>\r\n          <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n          <Route path=\"/delete\" exact component={DeleteJob}/>\r\n        </div>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport newJobReducer from './newJobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport toUploadReducer from './toUploadReducer';\r\nimport clearStorageReducer from './clearStorageReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: categoriesReducer,\r\n  uploadQueue: toUploadReducer,\r\n  clearStorage: clearStorageReducer\r\n})\r\n\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'CLEAR_LOCALSTORAGE'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer;\r\n","import _ from 'lodash';\nimport {\n  READ_TXT_FILE,\n  ENCODE_IMAGE,\n  GET_CATEGORY,\n  GET_LOCALSTORAGE,\n  UPDATE_PHOTOQTY\n} from '../actions/types';\n\n\nexport default (state = {}, action) => {\n  switch (action.type){\n    case READ_TXT_FILE:\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\n    case ENCODE_IMAGE:\n      return { ...state, [action.payload.id]: action.payload };\n    case GET_CATEGORY:\n      return { ...state, [action.payload.id]: action.payload };\n    case GET_LOCALSTORAGE:\n      return { ...state, categories: action.payload };\n    case UPDATE_PHOTOQTY:\n      return { ...state, [action.payload.id]: {\n          ...state[action.payload.id],\n          photoQty: action.payload.photoQty\n          //photoQueue: action.payload.photoQueue\n        }\n      };\n    default:\n      return state;\n  }\n}\n","import { TO_UPLOAD } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case TO_UPLOAD:\r\n      return { ...state, uploadQueue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  CLEAR_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CLEAR_LOCALSTORAGE:\r\n      return { ...state, categories: undefined, newJob: undefined };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import db from './database/db';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    newJob: store.getState().newJob,\r\n    categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile.aaaad6f5.bin\";"],"sourceRoot":""}