{"version":3,"sources":["apis/files.js","components/InputForm.js","database/db.js","components/pages/CreateJob.js","actions/index.js","actions/types.js","components/Footer.js","components/pages/CategoryList.js","components/Camera.js","apis/uploadImage.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/categoriesReducer.js","reducers/toUploadReducer.js","reducers/clearStorageReducer.js","index.js","localStorage.js","categoryListFile"],"names":["axios","create","baseURL","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","projectName","profileName","db","Dexie","version","stores","photoDb","CreateJob","state","toCategories","toDelete","createNewJob","setState","localStorage","getItem","includes","isOpen","err","console","log","Redirect","to","components_InputForm","initialValues","connect","dispatch","type","payload","profile","Footer","links","map","link","Link","path","key","id","classname","length","renderList","CategoryList","readTextFile","categoryListFile","categories","category","title","style","float","marginLeft","textAlign","photoQty","description","marginBottom","components_Footer","values","textFile","asyncToGenerator","regenerator_default","mark","_callee2","categoryArray","counter","wrap","_context2","prev","next","files","get","sent","data","split","forEach","tempArray","obj","photoQueue","push","stop","_x3","apply","arguments","styles","display","Camera","handleImage","event","target","onChange","accept","htmlFor","uploadImage","_callee","image","config","formData","_context","auth","username","password","crossDomain","FormData","append","post","abrupt","_x","Modal","ReactDOM","createPortal","show","onClick","e","stopPropagation","content","alt","src","actions","document","querySelector","CategoryEdit","_isMounted","testVar","categoryId","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","onClickThumbnail","URL","createObjectURL","photo","photoId","uploadFile","toastSettings","then","response","updateStatusTrue","getThumbnails","catch","onAddPhoto","img","renamedFile","startsWith","lastModified","File","saveToDb","_callee3","_context3","add","fileName","uploadStatus","_callee4","_context4","update","_callee5","collection","_context5","where","count","toArray","updatePhotoQty","message","status","toastManager","appearance","autoDismiss","getCategory","open","_this2","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_Camera","withToastManager","ownProps","newJob","getState","addPhoto","DeleteJob","cancel","toPath","resetData","clearLocalStorage","delete","es_Redirect","window","clear","App","dist","marginTop","HashRouter","Route","exact","INITIAL_STATE","appReducer","combineReducers","formReducer","undefined","action","objectSpread","_","mapKeys","defineProperty","uploadQueue","clearStorage","rootReducer","persistedState","localState","JSON","parse","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","es","components_App","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9baed377.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'https://binaryfour.github.io'\r\n})\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"solar\">Solar</option>\r\n          <option value=\"site-audit\">Site-Audit</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Name\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName){\r\n    errors.userName = 'You must enter a User Name';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\ndb.version(1).stores({\r\n    photoDb: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { createNewJob } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\nimport db from '../../database/db';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list\r\n  onSubmit = (formValues) => {\r\n    this.props.createNewJob(formValues);\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true });\r\n\r\n    //history.push('/categories');\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories === true){\r\n      return <Redirect to='/categories' />\r\n    }\r\n    else if(this.state.toDelete === true){\r\n      return <Redirect to='/delete' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'solar'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import files from '../apis/files';\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  CREATE_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPLOAD_IMAGE,\r\n  UPDATE_PHOTOQTY,\r\n  CLEAR_LOCALSTORAGE\r\n} from './types';\r\n\r\nexport const clearLocalStorage = () => {\r\n  window.localStorage.clear();\r\n\r\n  return{\r\n    type: CLEAR_LOCALSTORAGE,\r\n    payload: {}\r\n  }\r\n}\r\n\r\n//UNUSED\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const updatePhotoQty = (id, photoQty) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//Submit button saves NewJob data and navigates user to category list\r\nexport const createNewJob = (userName, projectName, profileName) => dispatch => {\r\n\r\n  dispatch({ type: CREATE_JOB, payload: {userName: userName, projectName: projectName, profile: profileName }});\r\n  //history.push('/categories');\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    var categoryArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, photoQueue: [] };\r\n        categoryArray.push(obj);\r\n        counter += 1;\r\n      }\r\n    });\r\n    //console.log(categoryArray);\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const CREATE_JOB = 'CREATE_JOB';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const CLEAR_LOCALSTORAGE = 'CLEAR_LOCALSTORAGE';\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return (\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile from '../../categoryListFile';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/delete', id: 'newJob', label: 'New Job' }\r\n]\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //If there is no localStorage, read text file and create categories.  Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"categories\":{}`)){\r\n        this.props.readTextFile(categoryListFile);\r\n      }\r\n\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      this.props.readTextFile(categoryListFile);\r\n    }\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n          <Link to={`/categories/${category.id}`} className=\"item\" key={category.id}>\r\n            <i className=\"large middle aligned icon camera\" />\r\n            <div className=\"content\">\r\n              {category.title}\r\n              <div style={{ float: 'right', marginLeft: '10px' }}>\r\n                Taken Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n            </div>\r\n          </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\" style={{ marginBottom: '48px'}}>{this.renderList()}</div>\r\n        <Footer links={links}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return{\r\n    categories: Object.values(state.categories),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass Camera extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui button large primary\" htmlFor=\"file\">Take Photo</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;\r\n","import files from '../apis/files';\r\n\r\nconst uploadImage = async (image) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return await files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nimport db from '../../database/db';\r\nimport Camera from '../Camera';\r\nimport Footer from '../Footer';\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport Modal from '../Modal';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//Used for footer\r\nconst links = [\r\n  { path: '/categories', id:'categoryList', label: 'Back' }\r\n];\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none'\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount(){\r\n    this._isMounted = true;\r\n    this.props.getCategory(this.state.categoryId);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    this.getThumbnails();\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image\r\n  uploadFile = () => {\r\n    const imageId = this.state.imageId;\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    uploadImage(this.state.image)\r\n    .then(response => {\r\n      //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })\r\n        this.getThumbnails();\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    });\r\n\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  onAddPhoto = async (img) => {\r\n    if(img.type.startsWith('image')){\r\n      const formValues = this.props.formValues;\r\n      const imageQty = this.state.imageQty + 1;\r\n      const imageTitle = `${formValues.projectName}_${this.props.category.title}_${imageQty}_${formValues.userName}`;\r\n      const imageId = `${this.state.categoryId}_${img.lastModified}`;\r\n      //Set current imageId to lastmodified date and rename file\r\n      const renamedFile = new File([img], imageTitle+'.jpeg', {type: img.type} );\r\n      //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n      await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n      //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n      try{\r\n        //If saveToDb fails, notify user w/ error code.\r\n        this.saveToDb(renamedFile);\r\n        this.getThumbnails();\r\n      }catch(error){\r\n        this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n      }\r\n      this.toastSettings(`Uploading File...`, 'info');\r\n\r\n      uploadImage(renamedFile)\r\n      .then(response => {\r\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n        this.toastSettings('Uploaded Image!','success');\r\n        this.updateStatusTrue(imageId);\r\n        //This causes issues if component unmounts.  Illegal setState\r\n        if(this._isMounted){\r\n          this.getThumbnails();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n      });\r\n    }\r\n    else{\r\n      //If user cancelled, don't do anything\r\n      console.log('User cancelled image take/Wrong file type');\r\n      this.toastSettings('Only images can be accepted', 'warning');\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Saves image to db\r\n  saveToDb = async (img) => {\r\n    await db.photoDb.add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: false, photo: img });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = async (imageId) => {\r\n    console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.photoDb.update(imageId, { uploadStatus: true });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    const categoryId = this.state.categoryId;\r\n    const photoQty = await db.photoDb.where('photoId').startsWith(categoryId).count();\r\n    //TODO: figure out how to catch await errors\r\n    if (photoQty > 0){\r\n      //getThumbnails\r\n      const collection = await db.photoDb.where('photoId').startsWith(categoryId);\r\n      const response = await collection.toArray();\r\n      this.setState({ thumbnails: response });\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    this.props.updatePhotoQty(categoryId, photoQty);\r\n    this.setState({ imageQty: photoQty });\r\n    console.log(this.state.thumbnails);\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <Camera onSubmit={this.onAddPhoto}/>\r\n        <h3>Photos: {this.state.imageQty}</h3>\r\n        <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n          {this.renderList()}\r\n        </div>\r\n        <Footer links={links} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return{\r\n    category: (Object.values(state.categories))[ownProps.match.params.id],\r\n    formValues: state.newJob.userName\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { clearLocalStorage } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    this.props.clearLocalStorage();\r\n    //console.log('Storage should be cleared: ',localStorage.getItem(\"state\"));\r\n    await db.delete();\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">New Job</button>\r\n        <Link to=\"/categories\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/categories\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Detected previous session.  Delete old photos?'\r\n          content='You have session data.  If you create a new job, you will lose all the photos you took from your previous session.  Delete photos and create a new job?'\r\n          path='/categories'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default connect(null, { clearLocalStorage })(DeleteJob);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <ToastProvider>\r\n      <div className=\"ui container\" style={{ marginTop: '10px'}}>\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/\" exact component={CreateJob}/>\r\n            <Route path=\"/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport newJobReducer from './newJobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport toUploadReducer from './toUploadReducer';\r\nimport clearStorageReducer from './clearStorageReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: categoriesReducer,\r\n  uploadQueue: toUploadReducer,\r\n  clearStorage: clearStorageReducer\r\n})\r\n\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'CLEAR_LOCALSTORAGE'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer;\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE,\r\n  UPDATE_PHOTOQTY\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { TO_UPLOAD } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case TO_UPLOAD:\r\n      return { ...state, uploadQueue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  CLEAR_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CLEAR_LOCALSTORAGE:\r\n      return { ...state, categories: undefined, newJob: undefined };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import db from './database/db';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    newJob: store.getState().newJob,\r\n    categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile.d1a472a9.bin\";"],"sourceRoot":""}