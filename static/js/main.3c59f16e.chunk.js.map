{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/CameraComp.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/index.js","reducers/uploadStatusReducer.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv","categoryListFile_salessv"],"names":["axios","create","baseURL","timeout","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","_this2","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","toSignin","getOpenJobId","currentJobs","jobs","keys","length","i","_","findKey","id","_callee","projName","jobIdNum","regenerator_default","wrap","_context","prev","next","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","Number","isInteger","addNewJob","console","log","setState","currentJob","stop","Redirect","to","components_InputForm","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","asyncToGenerator","mark","_callee3","dispatch","colormap","categoryArray","superCatArray","response","uniqueSuperCats","colorCount","colors","pictureReqId","_context4","require","t0","get","categoryListFile_install","sent","abrupt","categoryListFile_pcsv","categoryListFile_salessv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","toConsumableArray","Set","nshades","format","alpha","cellColor","parseInt","jobData","color","pictureReqData","categories","_x4","apply","arguments","_callee2","normalJobData","_context3","normalize","_x3","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","es_Redirect","display","height","components_Footer","ownProps","currentJobId","currentPictureReqs","userName","userData","values","yValue","readTextFile","textFile","_ref4","_callee4","_context5","_x5","location","styles","CameraComp","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","marginBottom","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","showPermissionsMsg","os","osVersion","componentDidMount","isOpen","open","getThumbnails","srcToFile","res","_context2","fetch","arrayBuffer","countLocalPhotos","localCatPhotosCount","table","where","equals","and","result","photoId","count","onClickThumbnail","URL","createObjectURL","photo","lastModifiedDate","size","uploadFile","_callee5","x","toastSettings","toString","updateStatusTrue","uploadStatus","onAddPhoto","_callee6","imgData","fileData","cameraChoice","timeStamp","renamedFile","_context6","Math","floor","Date","now","process","osName","File","saveToDb","t1","img","add","fileName","update","_callee7","_context7","startsWith","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_CameraComp","build_default","onTakePhoto","idealFacingMode","FACING_MODES","ENVIRONMENT","imageType","IMAGE_TYPES","JPG","isImageMirror","isMaxResolution","onCameraError","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","currentJobCounter","UploadAll","images","getLocalPhotos","localPhotosIDs","localPhotos","localPhotosPointers","y","verifiedPhotos","anyOf","uploadFiles","successArray","failArray","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","toSignIn","setUsername","App","dist","HashRouter","Route","exact","initialState","appReducer","combineReducers","action","objectSpread","newCount","categoryData","mapKeys","defineProperty","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","persistedState","localState","JSON","parse","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","es","components_App","href","origin","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","waitingServiceWorker","addEventListener","postMessage","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3c59f16e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL: 'https://binaryfour.github.io/',\r\n  timeout: 10000\r\n})\r\n","import { schema } from 'normalizr';\r\n//Root category defined at bottom, after deepest object defined first.\r\n\r\n//Define a categories schema\r\nconst pictureReq = new schema.Entity('pictureReqs');\r\n\r\n//Define a job schema\r\nconst job = new schema.Entity('jobs', {\r\n  pictureReqs: pictureReq\r\n});\r\n\r\n//Define a job array\r\n\r\nexport { job };\r\n//const normalizedData = normalize(localStorage.state, job);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n\r\ndb.version(3).stores({\r\n    job1: `photoId, uploadStatus`,\r\n    job2: `photoId, uploadStatus`,\r\n    job3: `photoId, uploadStatus`,\r\n    job4: `photoId, uploadStatus`,\r\n    job5: `photoId, uploadStatus`,\r\n    job6: `photoId, uploadStatus`,\r\n    job7: `photoId, uploadStatus`,\r\n    job8: `photoId, uploadStatus`,\r\n    job9: `photoId, uploadStatus`,\r\n    job0: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  //Check if formData image is messed up.\r\n  /*\r\n  if(formData.get('upload').size === 0 || image.lastModified === 0){\r\n    console.log('This is formData: ', formData.get('upload'));\r\n    return new Promise.reject(new Error('Image Corrupted'));\r\n  }\r\n  */\r\n\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return Promise.reject();\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport categoryListFile_salessv from '../categoryListFile_salessv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  //Color spectrum minimum is 11 colors (Package)\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    case 'salessv':\r\n      response = await files.get(categoryListFile_salessv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  componentDidMount(){\r\n\r\n  }\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n          <option value=\"salessv\">Sales SV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    //console.log('Input form onSubmit: ',formValues);\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n\r\n\r\n  //render dynamic field list\r\n  renderList(){\r\n    return this.props.fields.map( field => {\r\n      return(\r\n        <Field name={field.name} label={field.label} key={field.key} component=\r\n        {{\r\n          input: this.renderInput,\r\n          dropdown: this.renderDropdown\r\n        }[field.component]}\r\n        validate={field.validate}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    //console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <br/>\r\n        <button className=\"fluid ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  /*\r\n  render(){\r\n    console.log('this is props: ',this.props);\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        {this.renderList()}\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\n\r\n/*\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //console.log(formValues.profileName);\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n*/\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm'\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\n//import database from '../../database/db';\r\n\r\nconst userValidation = value => (!value ? 'You must enter a Project Name' : undefined)\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n  }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      console.log('entered redirect');\r\n      this.setState({ toSignin: true });\r\n    }\r\n    //console.log(this.props.jobs);\r\n    /*\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n    */\r\n  }\r\n\r\n  /*\r\n  createNewDb = async (jobId) => {\r\n    try{\r\n      if(!db.isOpen()){\r\n        await db.open();\r\n      }\r\n      db.close();\r\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\r\n      await db.version(db.verno+1).stores({\r\n          [jobId]: `photoId, uploadStatus`\r\n      });\r\n      db.open();\r\n\r\n    }\r\n    catch(e){\r\n      console.log('db creation failed', e);\r\n    }\r\n  }\r\n  */\r\n\r\n  /*\r\n  createDb = (jobId) => {\r\n    const dataBase = new Dexie('empowerDb');\r\n\r\n    this.props.createDatabase(dataBase);\r\n\r\n    const db = this.props.db;\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n\r\n  createDbTable = (jobId) => {\r\n    const db = this.props.db;\r\n    if(db.isOpen()){\r\n      db.close();\r\n    }\r\n    db.version(db.verno+1).stores({\r\n      [jobId]: `photoId, uploadStatus`\r\n    })\r\n    db.open();\r\n  }\r\n  */\r\n  getOpenJobId = () => {\r\n    const currentJobs = this.props.jobs;\r\n    if(Object.keys(this.props.jobs).length >= 10){\r\n      return null;\r\n    }\r\n    else{\r\n      //Find an available jobId slot (starting from 0, asc);\r\n      for(var i=0; i<10; i++){\r\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\r\n            //console.log(`should be the first non-existing jobId`);\r\n            return i;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = async (formValues) => {\r\n    const projName = formValues.projectName.toUpperCase();\r\n    //If there are no current jobs, create jobList w/ normalized data\r\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\r\n      await this.props.createJobList(projName, formValues.profileName, 0);\r\n      await this.props.setCurrentJob(`job0`);\r\n    }\r\n    //Otherwise, create a new job and merge data w/ store\r\n    else{\r\n      const jobIdNum = this.getOpenJobId();\r\n      //console.log(jobIdNum);\r\n      if(Number.isInteger(jobIdNum)){\r\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\r\n        await this.props.setCurrentJob(`job${jobIdNum}`);\r\n      }\r\n      else{\r\n        //prevent user from creating another job\r\n        console.log('There are already 10 jobs');\r\n      }\r\n    }\r\n    //this.props.setJobCounter(1);\r\n    //this.createNewDb(this.props.currentJob);\r\n\r\n\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to='/delete' />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>New Job</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\r\n        fields={\r\n          [\r\n            {\r\n            name: 'projectName',\r\n            label: 'Project Name (try to use one word, all use same)',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            },\r\n            {\r\n            name: 'profileName',\r\n            label: 'Profile',\r\n            component: 'dropdown',\r\n            key: 'field2'\r\n            }\r\n          ]\r\n        }\r\n        //TODO: pass down field information\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log('jobs dont exist yet');\r\n    return{\r\n      currentJob: state.jobMeta.currentJob,\r\n      counter: state.jobMeta.jobCounter,\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    //determine width of each button based on number of buttons\r\n    const width = `${100/this.props.links.length}%`;\r\n\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\n//import categoryListFile_install from '../../categoryListFile_install';\r\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/joblist', id: 'jobList', label: 'Back' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  state = {\r\n    toSignin: false\r\n  }\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n      this.setState({toSignin: true});\r\n    }\r\n    //console.log(this.props.sessions);\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    if(this.state.toSignin){\r\n      return(\r\n        <Redirect to='/' />\r\n      );\r\n    }\r\n\r\n    return(\r\n        <div>\r\n          <h2>Category List: {this.props.job.projectName}</h2>\r\n          <div className=\"ui celled list\" >{this.renderList()}</div>\r\n          <div className=\"padding\" style={{ display: 'block', height: '48px' }}></div>\r\n          <Footer links={links}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    userName: state.userData,\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\r\n    pageLocation: state.pageLocation.yValue,\r\n\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass CameraComp extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui fluid labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui fluid button large primary\" htmlFor=\"file\">Use Camera App</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CameraComp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\nimport { osVersion, osName } from 'react-device-detect';\r\n\r\nimport db from '../../database/db';\r\nimport CameraComp from '../CameraComp';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport Camera, { FACING_MODES, IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n\r\n//import detectConnection from '../detectConnection';\r\n\r\n//USED to be used for footer lol\r\n/*\r\nconst links = [\r\n  { path: `/categories`, id:'categoryList', label: 'Back' }\r\n];\r\n*/\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none',\r\n    showPermissionsMsg: false,\r\n    content: '',\r\n    os: osVersion\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount = async () =>{\r\n    //Set _isMounted var to true for potential unmount\r\n    this._isMounted = true;\r\n\r\n    //If the database isn't open, open it and get thumbnails\r\n    if(!db.isOpen()){\r\n      await db.open();\r\n    }\r\n    this.getThumbnails();\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n/*\r\nCamera Methods\r\n*/\r\n  onCameraError(error) {\r\n    console.log('This is the camera Error: ',error);\r\n    this.setState({ showPermissionsMsg: true });\r\n  }\r\n\r\n//https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript\r\n  //load src and convert to a File instance object\r\n  //work for any type of src, not only image src.\r\n  //return a promise that resolves with a File instance\r\n\r\n  srcToFile = async (src) => {\r\n    console.log('entered srcToFile');\r\n    try{\r\n      const res = await fetch(src);\r\n      //console.log('this is res: ', res);\r\n      return res.arrayBuffer();\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n/*\r\nEdit Methods\r\n*/\r\n\r\n  /*\r\n  Category status guide\r\n  neutral: gray minus symbol\r\n  success: green checkmark\r\n  fail: red X\r\n  waiting: spinning gray gear\r\n  */\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded' and returns the count\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal and display Filename, file details, and photo\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n    //console.log(image);\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({\r\n        showModal: '',\r\n        image: image.photo,\r\n        showImage: showImage,\r\n        imageId: image.photoId,\r\n        content: `photoId: ${image.photoId}\r\n        lastModified: ${image.photo.lastModifiedDate}\r\n        imageSize: ${image.photo.size}`\r\n      });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    //If image uploads w/ 200, notify user, change db status, refresh thumbnails.\r\n    try{\r\n      const response = await uploadImage(image);\r\n      console.log('response[0]: ',response.status.toString()[0]);\r\n      if(response.status.toString()[0] === '2'){\r\n        this.toastSettings('SUCCESS: Uploaded Image!','success');\r\n        this.updateStatusTrue(imageId);\r\n\r\n        //Update uploadStatus on thumbnail.  Find the current thumbnail in array and change catUploadStatus\r\n        let thumbnails = this.state.thumbnails;\r\n        for(let x = 0; x<thumbnails.length; x++){\r\n          if(thumbnails[x].photoId === imageId){\r\n            thumbnails[x].uploadStatus = 'uploaded';\r\n            console.log('Updated uploadStatus');\r\n            break;\r\n          }\r\n        }\r\n\r\n        this.setState({ thumbnails: thumbnails });\r\n        /*\r\n        this.setState({ thumbnails: thumbnails });\r\n        if(this._isMounted){\r\n          this.getThumbnails();\r\n        }\r\n        */\r\n      }\r\n      else{\r\n        this.toastSettings('FAIL: Image upload fail.  You can click on the thumbnail to re-attempt upload','error');\r\n      }\r\n\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('FAIL: Image upload fail.  You can click on the thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //Verify imageFile exists, not a blank file w/ no size.  Uses 'fetch' which is bad practice (superfluous network requests)\r\n  /*\r\n  verifyImage = async (image) => {\r\n    console.log('entered verifyImage');\r\n    if(image.size === 0){\r\n      console.log(image);\r\n      return false;\r\n    }\r\n    const imageURL = URL.createObjectURL(image);\r\n    try{\r\n      //see if you can fetch the image.  If you can, should be good\r\n      await fetch(imageURL);\r\n      return true;\r\n    }\r\n    catch(e){\r\n      console.log(`GET Failed, ${imageURL}`,e);\r\n      //notify user of issue, delete corrupt image from indexeddb\r\n      console.log('exit');\r\n      return false;\r\n\r\n    }\r\n  }\r\n  */\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name, save to db, attempt upload\r\n  //Embedded Camera: E, Native Camera: N\r\n  onAddPhoto = async (imgData) => {\r\n    //Check if imgData is string or object\r\n    //console.log('this is typeof: ',typeof imgData);\r\n    let fileData = imgData;\r\n    let cameraChoice = 'N';\r\n\r\n    //If using embedded Camera\r\n    if(typeof imgData == \"string\"){\r\n      fileData = await this.srcToFile(imgData);\r\n      cameraChoice = 'E';\r\n    }\r\n\r\n    /*\r\n    TODO: iOS Issue.  When image fails upload, some thumbnails become \"blank\".  If user goes out and comes back in, thumbnails show normally\r\n    Race condition?\r\n    1.  User takes pic\r\n    2.  Sets state, awaits db save\r\n    3.  Gets thumbnails\r\n    4.  Attempt pic upload\r\n    SUCCESS: Update upload status, get thumbnails\r\n    FAIL: Do nothing\r\n    */\r\n\r\n   if (typeof fileData.size === 'undefined') {\r\n      this.toastSettings(`FAIL: Image NOT Exist. Please try again`, 'error');\r\n      return null;\r\n   }\r\n\r\n    //Create Filename for upload. Timestamp of now used to create unique photoID. PROJNAME-profile_Category-qty_UserInitials\r\n    //ex. SMITH-pcsv_7StructRaftA-Rafters-1_TC\r\n    const job = this.props.job;\r\n    const userName = this.props.userName;\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n    const imageQty = this.state.imageQty + 1;\r\n\r\n    //aV: App Version, os: iOS version, cA: Camera used (E: Embedded, N: Native)\r\n    const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}{av${process.env.REACT_APP_VERSION}-${osName}_${this.state.os}-ca${cameraChoice}}`;\r\n    const imageId = `${this.state.categoryId}_${timeStamp}`;\r\n    //create file w/ imageTitle and .jpeg setting\r\n    const renamedFile = new File([fileData], imageTitle+'.jpeg', {type: 'image/jpeg'} );\r\n\r\n    //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n\r\n    //Set State.  These values are used when saving file to db.  Cause Race Condition?\r\n    //await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n\r\n\r\n    //Save file to db\r\n    try{\r\n      await this.saveToDb(renamedFile, imageTitle, imageId);\r\n    }catch(error){\r\n      //If saveToDb fails, notify user w/ error code.\r\n      this.toastSettings(`FAIL: Image NOT Saved.  You may need to clear some storage space: ${error}`, 'error');\r\n      return null;\r\n    }\r\n\r\n    this.getThumbnails();\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    //console.log(renamedFile);\r\n    //If image is verified (image not corrupt) set for upload\r\n    if(renamedFile.size !== 0){\r\n      try{\r\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n        /*TODO: If uploads are being corrupted, wouldn't that mean that uploadImage here\r\n          is the root cause?  Uploading renamedFile coming in as 0kb file.\r\n        */\r\n        const response = await uploadImage(renamedFile);\r\n        console.log('This is response', response);\r\n        if(response.status.toString()[0] === '2'){\r\n          this.toastSettings('SUCCESS: Uploaded Image!','success');\r\n          this.updateStatusTrue(imageId);\r\n\r\n          //Update uploadStatus on thumbnail.  Find the current thumbnail in array and change catUploadStatus\r\n          //Bad solution, subject to race conditions.  Shit.\r\n          let thumbnails = this.state.thumbnails;\r\n          for(let x = 0; x<thumbnails.length; x++){\r\n            if(thumbnails[x].photoId === imageId){\r\n              thumbnails[x].uploadStatus = 'uploaded';\r\n              console.log('Updated uploadStatus');\r\n              break;\r\n            }\r\n          }\r\n\r\n          this.setState({ thumbnails: thumbnails });\r\n          //This causes issues if component unmounts.  Illegal setState\r\n          /*\r\n          if(this._isMounted){\r\n            this.getThumbnails();\r\n          }\r\n          */\r\n        }\r\n        else{\r\n          this.toastSettings(`FAIL: Image NOT uploaded. Send to Dev: ${response.status}`,'error');\r\n        }\r\n\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        this.toastSettings(`FAIL: Image NOT uploaded.  Please check your internet connection and try again. ${e}`,'error');\r\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n      }\r\n    }\r\n    else{\r\n      this.toastSettings(`FAIL: Image corrupted, Please re-take the photo`,'error');\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //Saves image to db\r\n  //job and picture req should always have the same suffix # ex. job0, pictureReq0.  job1, pictureReq1\r\n  saveToDb = (img, imageTitle, imageId) => {\r\n      //return db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n      return db.table(this.props.currentJob).add({ photoId: `${imageId}`, fileName: imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = (imageId) => {\r\n      return db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    console.log('Enter getThumbnails');\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      //console.log(thumbnails);\r\n      photoQty = thumbnails.length;\r\n      //console.log('no error');\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    console.log('This is thumbnails: ',thumbnails);\r\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log('end of getThumbnails');\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        //console.log(imageURL);\r\n        //this.verifyImage(image.photo);\r\n        //console.log('This is image:',imageURL);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          content={this.state.content}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <h4 style={this.state.showPermissionsMsg ? {} : {display: 'none'}}>You must allow access to the Camera.  If you denied the permission, please go to your chrome settings and enable the Camera permission for this site</h4>\r\n        <div>\r\n          <CameraComp onSubmit = {this.onAddPhoto} />\r\n          <Camera\r\n            onTakePhoto = { (imgData) => { this.onAddPhoto(imgData); } }\r\n            idealFacingMode = {FACING_MODES.ENVIRONMENT}\r\n            imageType = {IMAGE_TYPES.JPG}\r\n            isImageMirror = {false}\r\n            isMaxResolution = {true}\r\n            onCameraError = { (error) => { this.onCameraError(error); } }\r\n          />\r\n          <h3>Photos: {this.state.imageQty}</h3>\r\n          <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n        <Footer links={[\r\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\r\n        ]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n\r\n  const currentJobId = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\r\n  //console.log(ownProps.match.params.id);\r\n\r\n  return{\r\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\r\n    job: state.sessions.entities.jobs[currentJobId],\r\n    userName: state.userData,\r\n    currentJob: currentJobId\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    const jobId = this.props.currentJobId;\r\n    const pictureReq = this.props.currentPictureReq;\r\n    //console.log(jobId, pictureReq);\r\n    try{\r\n      db.table(jobId).clear();\r\n      this.props.setCurrentJob('');\r\n      await this.props.deleteJob(jobId, pictureReq);\r\n    }\r\n    catch (e){\r\n      console.log('Table did not clear',e);\r\n    }\r\n\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    /*\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\r\n        <Link to=\"/joblist\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n    */\r\n  }\r\n\r\n  render(){\r\n    //console.log(this.state);\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/joblist\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\r\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\r\n          path='/joblist'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  try{\r\n    if(state.jobMeta.currentJob){\r\n      const currentJobId = state.jobMeta.currentJob;\r\n      const currentJobCounter = state.jobMeta.jobCounter;\r\n      const currentJob = state.sessions.entities.jobs[currentJobId];\r\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n      return{\r\n        currentJobId: currentJobId,\r\n        currentJobCounter: currentJobCounter,\r\n        currentJob: currentJob,\r\n        currentPictureReq: currentPictureReq\r\n      }\r\n    }\r\n    else{\r\n      return{\r\n        currentJobId: '',\r\n        currentJobCounter: '',\r\n        currentJob: '',\r\n        currentPictureReq: ''\r\n      }\r\n    }\r\n  }\r\n  catch (e){\r\n    console.log(e);\r\n    //Should only be re-direct requests after a delete\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n  state = {\r\n    cancel: false,\r\n    images: []\r\n  }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n  componentDidMount = async () => {\r\n    //If the database isn't open, open it to get access to photos\r\n    if(!db.isOpen()){\r\n      try{\r\n        await db.open();\r\n\r\n      }\r\n      catch(e){\r\n        this.toastSettings(`FAIL: DB couldn't open. ${e}`,'error');\r\n      }\r\n    }\r\n    //Get photo files in background while modal menu is shown to user.\r\n    this.getLocalPhotos();\r\n  }\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  getLocalPhotos = async () => {\r\n    let localPhotosIDs = [];\r\n    let localPhotos = [];\r\n    try{\r\n      //Get array of primary keys for notUploaded pictures in current job from db\r\n      const localPhotosPointers = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\r\n      //console.log('localPhotosIDs: ',localPhotosIDs);\r\n      for(let y = 0; y<localPhotosPointers.length; y++){\r\n        localPhotosIDs.push(localPhotosPointers[y].photoId);\r\n      }\r\n      //Get array of photo files from db using primary key arrays\r\n      localPhotos = await db.table(this.props.currentJob).where('photoId').anyOf(localPhotosIDs).toArray();\r\n      //console.log('localPhotos: ',localPhotos);\r\n    }\r\n    catch(e){\r\n      console.log(e);\r\n      //Tell user images could not be retrieved from DB.  Re-direct back to category list\r\n      this.toastSettings(`FAIL: Could not get images. ${e}`,'error');\r\n      this.setState({ cancel: true });\r\n    }\r\n      //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\r\n\r\n      //If the photo array has photos in it, verify photos aren't 0kb (empty photo)\r\n      if(localPhotos.length !== 0){\r\n        let verifiedPhotos = [];\r\n        //Push verified photos into verifiedPhotos array for upload.\r\n        for(let x = 0; x<localPhotos.length; x++){\r\n          const image = localPhotos[x].photo;\r\n          if(image.size !== 0){\r\n            verifiedPhotos.push(localPhotos[x]);\r\n          }\r\n          else{\r\n            this.toastSettings(`${image.name} not verified, size: ${image.size}`, 'error');\r\n          }\r\n        }\r\n        //console.log('localPhotos: ',localPhotos);\r\n        //console.log('verifiedPhotos: ',verifiedPhotos);\r\n        //this.uploadFiles(verifiedPhotos);\r\n        //this.setState({ images: verifiedPhotos });\r\n      }\r\n      else{\r\n        //If the photo array has no photos in it, notify user and re-direct to job list\r\n        this.toastSettings(`No photos to Upload!`, 'warning');\r\n        this.setState({ cancel: true });\r\n      }\r\n\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Verify imageFile exists, not a blank file w/ no size (Overkill, used to troubleshoot my poor implementation of db)\r\n  /*\r\n  verifyImage = async (image) => {\r\n    console.log('entered verifyImage');\r\n    if(image.size === 0){\r\n      console.log(image);\r\n      return false;\r\n    }\r\n    const imageURL = URL.createObjectURL(image);\r\n    try{\r\n      //see if you can fetch the image.  If you can, should be good\r\n      await fetch(imageURL);\r\n      return true;\r\n    }\r\n    catch(e){\r\n      console.log(`GET Failed, ${imageURL}`,e);\r\n      //notify user of issue, delete corrupt image from indexeddb\r\n      console.log('exit');\r\n      return false;\r\n\r\n    }\r\n  }\r\n  */\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        //Get category ID (ex. 12_102985943, get \"12\")\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\r\n\r\n        //Upload photo.  If 200 code, add to success array, otherwise, add to fail array\r\n        const response = await uploadImage(localPhotos[i].photo);\r\n        if(response.status === 200){\r\n          //Get categoryID from photo, add it to successArray\r\n          this.updateStatusTrue(localPhotos[i].photoId);\r\n          successArray.push(photoCategory);\r\n        }\r\n        else{\r\n          failArray.push(tempArray[0]);\r\n        }\r\n\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.table(this.props.currentJob)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  /*\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n  */\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFiles(this.state.images)} className=\"ui button positive\">Upload</button>\r\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path={`${this.props.currentJob}/categories`}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  const currentJob = state.jobMeta.currentJob;\r\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\r\n\r\n  return{\r\n    //categories: Object.values(state.categories),\r\n    currentJob: currentJob,\r\n    pictureReq: currentPictureReqs\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\n//import { osVersion } from 'react-device-detect';\r\n\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = {\r\n    toCategories: false,\r\n    toDelete: false,\r\n    toSignin: false,\r\n    jobId: ''\r\n\r\n  };\r\n\r\n  componentDidMount(){\r\n    //If userData is empty, redirect to Signin page\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n        console.log('entered redirect');\r\n        this.setState({ toSignin: true });\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(\"get State error: \",e)\r\n      //re-direct to SignIn\r\n      this.setState({ toSignin: true });\r\n    }\r\n\r\n\r\n    //console.log('this is osVersion: ',osVersion);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    else if(this.state.toSignin){\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(JobList);\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(toastManager);\r\n","/*\r\nSignIn - First menu.  User inputs their username\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { setUsername } from '../../actions';\r\n\r\nimport InputForm from '../InputForm';\r\n\r\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\r\n\r\nclass SignIn extends React.Component{\r\n\r\n  state = { toJobList: false, toSignIn: false };\r\n\r\n  componentDidMount(){\r\n    //if localStorage exists, redirect to /joblist\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`) & !localStorage.getItem(\"state\").includes(`\"userData\":{}`)){\r\n        console.log('going to joblist');\r\n        this.setState({ toJobList: true });\r\n      }\r\n    }\r\n    catch(e){\r\n      //If there's no local storage, best to start back from SignIn.  I think.\r\n      console.log('localStorage check failed: ',e);\r\n\r\n    }\r\n\r\n    /*\r\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\r\n      //localStorage has old architecture, delete localStorage\r\n      localStorage.clear();\r\n    }\r\n    */\r\n  }\r\n\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    //console.log('Clicked: ',formValues);\r\n    this.props.setUsername(formValues.userName);\r\n    this.setState({ toJobList: true });\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toJobList){\r\n      return <Redirect to='/joblist' />\r\n    }\r\n\r\n\r\n    return(\r\n      <div>\r\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\r\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\r\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\r\n          [\r\n            {\r\n            name: 'userName',\r\n            label: 'User Initials',\r\n            component: 'input',\r\n            key: 'field1',\r\n            validate: userValidation\r\n            }\r\n          ]\r\n        }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default connect(null, { setUsername })(SignIn);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//import { connect } from 'react-redux';\r\n//import { uploadAllPhotos, updateUploadStatus, setUsername } from '../actions';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n//import NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n/*\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n*/\r\n\r\n//console.log('ayylmao');\r\n  render(){\r\n    try{\r\n      return (\r\n        <ToastProvider>\r\n          <p>v{process.env.REACT_APP_VERSION}</p>\r\n          {/* <button className=\"ui button\" onClick={() => toSignin(props) }>Click here to delete userName</button> */}\r\n          <div className=\"ui container\" >\r\n            <HashRouter>\r\n              <div>\r\n                <Route path=\"/newjob\" exact component={CreateJob}/>\r\n                <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n                <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n                <Route path=\"/delete\" exact component={DeleteJob}/>\r\n                <Route path=\"/upload\" exact component={UploadAll}/>\r\n                <Route path=\"/joblist\" exact component={JobList}/>\r\n                <Route path=\"/\" exact component={SignIn}/>\r\n              </div>\r\n            </HashRouter>\r\n          </div>\r\n        </ToastProvider>\r\n      );\r\n    }\r\n    catch(e){\r\n      //Something went wrong with Service Worker upgrade, show clear cache button/indexeddb options\r\n      console.log('Router broken: ',e);\r\n      return(\r\n        <div>If you're seeing this message, screenshot this page and send this error message to IT:\r\n          <div>{e}</div>\r\n        </div>\r\n\r\n\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n//Dev function\r\n/*\r\nconst toSignin = (props) => {\r\n  console.log(\"entering toSignin \", props);\r\n  props.setUsername({});\r\n}\r\n*/\r\n\r\n/*\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus,\r\n    userData: state.userData\r\n  }\r\n}\r\n*/\r\n\r\n//const networkDetector = NetworkDetector(App);\r\n\r\nexport default App;\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\r\n\r\nconst initialState = {\r\n  currentJob: '',\r\n  jobCounter: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type){\r\n    case SET_CURRENTJOB:\r\n      return { ...state, currentJob: action.payload };\r\n\r\n    case SET_JOBCOUNTER:\r\n      const newCount = state.jobCounter + action.payload;\r\n      return { ...state, jobCounter: newCount };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport userReducer from './userReducer';\r\nimport jobReducer from './jobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\nimport currentJobReducer from './currentJobReducer';\r\nimport uploadStatusReducer from './uploadStatusReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  uploadStatus: uploadStatusReducer,\r\n  userData: userReducer,\r\n  jobMeta: currentJobReducer,\r\n  categoryData: categoriesReducer,\r\n  sessions: jobReducer,\r\n  form: formReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\n/*\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'DELETE_JOB'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n*/\r\n\r\n//export default rootReducer;\r\nexport default appReducer;\r\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case UPLOAD_ALLIMAGES_STATUS:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { SET_USERNAME } from '../actions/types'\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SET_USERNAME:\r\n\r\n      //return { ...state, action.payload };\r\n\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    /*\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    */\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    //window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n  //  });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\r\n      registration.onupdatefound = () => {\r\n        //installing, returns a service worker whose .state property is installing\r\n        const installingWorker = registration.installing;\r\n        //If there's no service worker, exit\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        //onstatechange, fired anytime .state property changes\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import Dexie from 'dexie';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    userData: store.getState().userData,\r\n    sessions: store.getState().sessions,\r\n    jobMeta: store.getState().jobMeta,\r\n    db: store.getState().db\r\n    //categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\n\r\n//serviceWorker.register();\r\nserviceWorker.register({\r\n  onUpdate: registration => {\r\n    const waitingServiceWorker = registration.waiting\r\n\r\n    if (waitingServiceWorker) {\r\n      waitingServiceWorker.addEventListener(\"statechange\", event => {\r\n        if (event.target.state === \"activated\") {\r\n          window.location.reload()\r\n        }\r\n      });\r\n      waitingServiceWorker.postMessage({ type: \"SKIP_WAITING\" });\r\n    }\r\n  }\r\n});\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n\r\n\r\n//Paste this command into console to check localStorage size.\r\n/*\r\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\r\n*/\r\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.cb6e525c.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.1ad94596.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_salessv.7af64a19.bin\";"],"sourceRoot":""}