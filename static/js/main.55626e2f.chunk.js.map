{"version":3,"sources":["categoryListFile_install","categoryListFile_pcsv","apis/files.js","actions/index.js","actions/types.js","components/InputForm.js","database/db.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/Camera.js","components/Modal.js","apis/uploadImage.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/categoriesReducer.js","reducers/toUploadReducer.js","reducers/clearStorageReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js"],"names":["module","exports","__webpack_require__","p","axios","create","baseURL","updateCatUploadStatus","categoryId","status","type","payload","id","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","length","projectName","profileName","db","Dexie","version","stores","photoDb","CreateJob","state","toCategories","toDelete","toUpperCase","createNewJob","setState","localStorage","getItem","includes","isOpen","err","console","log","Redirect","to","components_InputForm","initialValues","connect","dispatch","profile","Footer","links","map","link","Link","path","key","style","width","classname","renderList","CategoryList","readTextFile","categoryListFile_install","categoryListFile_pcsv","pageLocation","window","scrollTo","saveLocation","pageYOffset","categories","category","backgroundColor","cellColor","textAlign","photoQty","success","fail","neutral","waiting","catUploadStatus","title","description","marginBottom","components_Footer","values","newJob","yValue","textFile","asyncToGenerator","regenerator_default","mark","_callee2","colormap","categoryArray","superCatArray","counter","uniqueSuperCats","colorCount","colors","wrap","_context2","prev","next","require","files","get","sent","data","split","forEach","tempArray","obj","push","toConsumableArray","Set","nshades","format","alpha","parseInt","stop","_x3","apply","arguments","location","styles","display","Camera","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","e","stopPropagation","content","alt","src","image","actions","document","querySelector","uploadImage","config","auth","username","password","crossDomain","formData","FormData","append","post","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","countLocalPhotos","_callee","localCatPhotosCount","_context","where","equals","and","result","photoId","count","t0","onClickThumbnail","URL","createObjectURL","photo","uploadFile","_callee3","_context3","toastSettings","updateStatusTrue","getThumbnails","onAddPhoto","_callee4","img","renamedFile","_context4","startsWith","lastModified","File","saveToDb","_callee5","_context5","add","fileName","uploadStatus","_callee6","_context6","update","_callee7","_context7","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","getCategory","open","_this2","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_Camera","withToastManager","ownProps","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","clearLocalStorage","delete","es_Redirect","clear","UploadAll","getLocalPhotos","localPhotos","uploadFiles","successArray","failArray","i","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","getStatus","App","dist","marginTop","HashRouter","Route","exact","INITIAL_STATE","appReducer","combineReducers","formReducer","undefined","action","objectSpread","_","mapKeys","defineProperty","uploadQueue","clearStorage","rootReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","persistedState","localState","JSON","parse","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","stringify","setItem","setLocalStorage","render","es","components_App","process","href","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.55626e2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.d1a472a9.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.f1797b56.bin\";","import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'https://binaryfour.github.io'\r\n})\r\n","import files from '../apis/files';\r\n//import db from '../database/db';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  CREATE_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPLOAD_IMAGE,\r\n  UPDATE_PHOTOQTY,\r\n  CLEAR_LOCALSTORAGE,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION\r\n} from './types';\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      id: categoryId\r\n    }\r\n  }\r\n}\r\n\r\nexport const clearLocalStorage = () => {\r\n  window.localStorage.clear();\r\n\r\n  return{\r\n    type: CLEAR_LOCALSTORAGE,\r\n    payload: {}\r\n  }\r\n}\r\n\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n\r\n\r\nexport const updatePhotoQty = (id, photoQty) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n//Submit button saves NewJob data and navigates user to category list\r\nexport const createNewJob = (userName, projectName, profileName) => dispatch => {\r\n\r\n  dispatch({ type: CREATE_JOB, payload: {userName: userName, projectName: projectName, profile: profileName }});\r\n  //history.push('/categories');\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const CREATE_JOB = 'CREATE_JOB';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const CLEAR_LOCALSTORAGE = 'CLEAR_LOCALSTORAGE';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"install\">Install</option>\r\n          <option value=\"pcsv\">PCSV</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName || formValues.userName.length > 3){\r\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","import Dexie from 'dexie';\r\n\r\nconst db = new Dexie('empowerDb');\r\n/*\r\ndb.version(1).stores({\r\n    photoDb: `photoId, uploadStatus`\r\n});\r\n*/\r\ndb.version(2).stores({\r\n    photoDb: `photoId, uploadStatus`\r\n});\r\n\r\nexport default db;\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { createNewJob } from '../../actions';\r\n\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\nimport db from '../../database/db';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false }\r\n\r\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\r\n  //If new job, clear localStorage\r\n  //If old job, re-direct to /categories page\r\n  componentDidMount(){\r\n    try{\r\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\r\n        this.setState({ toDelete: true });\r\n      }\r\n\r\n    } catch (err) {\r\n      //catch error.  If state is null, create new categories list\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\r\n  onSubmit = (formValues) => {\r\n    formValues.userName = formValues.userName.toUpperCase();\r\n    formValues.projectName = formValues.projectName.toUpperCase();\r\n    //formValues.userName = tempUser;\r\n\r\n    this.props.createNewJob(formValues);\r\n    //set state to true for navigation\r\n    this.setState({ toCategories: true });\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    if(this.state.toCategories === true){\r\n      return <Redirect to='/categories' />\r\n    }\r\n    else if(this.state.toDelete === true){\r\n      return <Redirect to='/delete' />\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Footer extends React.Component{\r\n\r\n\r\n  //Renders list of links to be displayed in footer\r\n  renderList(props) {\r\n    return this.props.links.map( link => {\r\n      return(\r\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: '50%'}}>\r\n          {link.label}\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\r\n    return(\r\n      <div className={classname}>\r\n        {this.renderList()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile_install from '../../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../../categoryListFile_pcsv';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile, saveLocation } from '../../actions';\r\n\r\n//import db from '../../database/db';\r\nimport Footer from '../Footer';\r\n//import offline from 'offline-js';\r\n\r\n//Used for filling in footer\r\nconst links = [\r\n  { path: '/delete', id: 'newJob', label: 'New Job' },\r\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\r\n]\r\n\r\n//Used for deciding which icon to show for category Upload status\r\n//const catUploadStatuses =\r\n\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\r\n  //Then save to localStorage\r\n  //Otherwise, load categories from localStorage\r\n  componentDidMount(){\r\n    try{\r\n      if(localStorage.getItem(\"state\").includes(`\"categories\":{}`)){\r\n        switch(this.props.formValues.profileName){\r\n          case 'install':\r\n            this.props.readTextFile(categoryListFile_install);\r\n            break;\r\n          case 'pcsv':\r\n            this.props.readTextFile(categoryListFile_pcsv);\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n      //catch error.  If state is null, create new categories list\r\n      //this.props.readTextFile(categoryListFile);\r\n    }\r\n    //If there is a saved page location, send user back to that position\r\n    if(this.props.pageLocation){\r\n      window.scrollTo(0, this.props.pageLocation);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //save page position\r\n    //console.log('Y offset ', window.pageYOffset);\r\n    this.props.saveLocation(window.pageYOffset);\r\n  }\r\n\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  //change icons based on catUploadStatus\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`/categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\r\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <div className=\"description\">\r\n                Pics\r\n                <div style={{ textAlign: 'center' }}>\r\n                  {category.photoQty}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          {{\r\n            success: <i className='large middle aligned inverted green check icon'></i>,\r\n            fail: <i className='large middle aligned inverted red x icon'></i>,\r\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\r\n            waiting: <i className='large middle aligned cog loading icon'></i>\r\n          }[category.catUploadStatus]}\r\n          <div className=\"content\" >\r\n            <div className=\"header\">{category.title}</div>\r\n              <div className=\"description\">\r\n                {category.description}\r\n              </div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\" style={{ marginBottom: '48px'}}>{this.renderList()}</div>\r\n        <Footer links={links}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return{\r\n    categories: Object.values(state.categories),\r\n    formValues: state.newJob.userName,\r\n    pageLocation: state.pageLocation.yValue\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\r\n","/*\r\nCamera - Renders a 'Take Photo' button that prompts user Camera\r\n\r\nPurpose:\r\nGet photo from user camera.  Hand off photo file through callback\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nconst styles = {\r\n  display: 'none'\r\n};\r\n\r\nclass Camera extends React.Component {\r\n\r\n  //Callback function.  Returns taken photo\r\n  handleImage = (event) => {\r\n    this.props.onSubmit(event.target.files[0]);\r\n  }\r\n\r\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\r\n  render (){\r\n    return(\r\n      <div className=\"ui labeled big input\">\r\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\r\n        <label className=\"ui button large primary\" htmlFor=\"file\">Take Photo</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Modal extends React.Component{\r\n\r\n  render(){\r\n    return ReactDOM.createPortal(\r\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\r\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\r\n          <div className=\"header\">{this.props.title}</div>\r\n          <div className=\"content\">{this.props.content}</div>\r\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\r\n          <div className=\"actions\">{this.props.actions}</div>\r\n        </div>\r\n      </div>,\r\n      document.querySelector('#modal')\r\n    )\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import files from '../apis/files';\r\n\r\n//import axiosRetry from 'axios-retry';\r\n\r\nconst uploadImage = (image) => {\r\n\r\n  //axios retry for exponential back-off\r\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\r\n\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  /*\r\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n  await fetch(proxyurl + url)\r\n  .then(response => response.text())\r\n  .then(contents => console.log(contents))\r\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\r\n  */\r\n\r\n  const config = {\r\n    auth: authParam,\r\n    crossDomain: true\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\r\n  //return axiosRetry(files)\r\n\r\n\r\n}\r\n\r\nexport default uploadImage;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\nPhoto file title syntax \"projectName_title_imgQty_user\"\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nimport db from '../../database/db';\r\nimport Camera from '../Camera';\r\nimport Footer from '../Footer';\r\nimport Modal from '../Modal';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\n//import detectConnection from '../detectConnection';\r\n\r\n//Used for footer\r\nconst links = [\r\n  { path: '/categories', id:'categoryList', label: 'Back' }\r\n];\r\n/*\r\nColor Hex Codes:\r\n\r\nRed: DB2828\r\nYellow: FBBD08\r\nBlue: 2185D0\r\nOrange: F2711C\r\nGreen: 21BA45\r\n*/\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\r\n  _isMounted = false;\r\n  testVar = false;\r\n\r\n  state = {\r\n    categoryId: this.props.match.params.id,\r\n    image: {},\r\n    showImage: '',\r\n    imageTitle: '',\r\n    imageId:'',\r\n    imageQty: '',\r\n    thumbnails: [],\r\n    showModal: 'none'\r\n  };\r\n\r\n  //Fetch the category data from store\r\n  //Get the photoQty and existing thumbnails\r\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\r\n  componentDidMount(){\r\n    this._isMounted = true;\r\n    this.props.getCategory(this.state.categoryId);\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    this.getThumbnails();\r\n  }\r\n\r\n  //if the component unmounts, cancel any setState calls\r\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.countLocalPhotos();\r\n  }\r\n\r\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\r\n  countLocalPhotos = async () => {\r\n    //console.log('Entered countLocalPhotos');\r\n    const photoQty = this.props.category.photoQty;\r\n\r\n    //If there are no photos, do nothing\r\n    if (photoQty !== 0){\r\n      let status = 'neutral';\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.photoDb\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${this.state.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        this.props.updateCatUploadStatus(this.state.categoryId, status);\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n\r\n      }\r\n    }\r\n    //console.log('localCatPhotosCount', localCatPhotosCount);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //TODO: modal options (re-take or delete)\r\n  onClickThumbnail = async (image) => {\r\n    //if(!image.uploadStatus){\r\n      const showImage = URL.createObjectURL(image.photo);\r\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\r\n  }\r\n\r\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\r\n  uploadFile = async () => {\r\n    const imageId = this.state.imageId;\r\n    const image = this.state.image;\r\n    await this.setState({\r\n              showModal: 'none',\r\n              image: {},\r\n              showImage: '',\r\n              imageId: ''\r\n            })\r\n    this.toastSettings(`Uploading File...`, 'info');\r\n    try{\r\n      await uploadImage(image);\r\n      this.toastSettings('Uploaded Image!','success');\r\n      this.updateStatusTrue(imageId);\r\n\r\n      if(this._isMounted){\r\n        this.getThumbnails();\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n    }\r\n  }\r\n\r\n  //callback to Camera to get Added photo file.  Create photo file name\r\n  onAddPhoto = async (img) => {\r\n    if(img.type.startsWith('image')){\r\n      const formValues = this.props.formValues;\r\n      const imageQty = this.state.imageQty + 1;\r\n      const imageTitle = `${formValues.projectName}-${formValues.profileName}_${this.props.category.title}-${imageQty}_${formValues.userName}`;\r\n      const imageId = `${this.state.categoryId}_${img.lastModified}`;\r\n      //Set current imageId to lastmodified date and rename file\r\n      const renamedFile = new File([img], imageTitle+'.jpeg', {type: img.type} );\r\n      //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\r\n      await this.setState({ imageTitle: imageTitle, imageId: imageId });\r\n      //Save file to db, upload photo to server, refresh current page w/ thumbnails\r\n      try{\r\n        //If saveToDb fails, notify user w/ error code.\r\n        this.saveToDb(renamedFile);\r\n        this.getThumbnails();\r\n      }catch(error){\r\n        this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\r\n      }\r\n      this.toastSettings(`Uploading File...`, 'info');\r\n\r\n      try{\r\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\r\n        await uploadImage(renamedFile);\r\n        this.toastSettings('Uploaded Image!','success');\r\n        this.updateStatusTrue(imageId);\r\n        //This causes issues if component unmounts.  Illegal setState\r\n        if(this._isMounted){\r\n          this.getThumbnails();\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\r\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\r\n      }\r\n    }\r\n    else{\r\n      //If user cancelled, don't do anything\r\n      //console.log('User cancelled image take/Wrong file type');\r\n      this.toastSettings('Only images can be accepted', 'warning');\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //Saves image to db\r\n  saveToDb = async (img) => {\r\n    await db.photoDb.add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img });\r\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\r\n  }\r\n\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.photoDb.update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Access db and return count: number of photos in category\r\n  //put thumbnails in state thumbnails and display\r\n  getThumbnails = async () => {\r\n    let thumbnails = [];\r\n    let photoQty = 0;\r\n    const categoryId = this.state.categoryId;\r\n    try{\r\n      thumbnails = await db.photoDb.where('photoId').startsWith(`${categoryId}_`).toArray();\r\n      photoQty = thumbnails.length;\r\n    }\r\n    catch (e){\r\n      console.log('No Photos', e);\r\n    }\r\n    //Update store w/ photoQty value and rerender\r\n    this.props.updatePhotoQty(categoryId, photoQty);\r\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\r\n    //console.log(this.state.thumbnails);\r\n  }\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n\r\n\r\n  //render options for Modal\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\r\n        <button onClick={() => this.setState({\r\n          showModal: 'none',\r\n          image: {},\r\n          showImage: '',\r\n          imageId: ''\r\n        })} className=\"ui button\">Cancel</button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  //render list of photos\r\n  renderList() {\r\n    return this.state.thumbnails.map( image => {\r\n      if(image){\r\n        const imageURL = URL.createObjectURL(image.photo);\r\n        return(\r\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\r\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\r\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\r\n          </div>\r\n        );\r\n      };\r\n      return <div></div>;\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Modal\r\n          show={this.state.showModal}\r\n          title={this.state.image.name}\r\n          image={this.state.showImage}\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ showModal: 'none' })}\r\n        />\r\n        <h2>{this.props.category.title}</h2>\r\n        <h3>{this.props.category.description}</h3>\r\n        <Camera onSubmit={this.onAddPhoto}/>\r\n        <h3>Photos: {this.state.imageQty}</h3>\r\n        <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\r\n          {this.renderList()}\r\n        </div>\r\n        <Footer links={links} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return{\r\n    category: (Object.values(state.categories))[ownProps.match.params.id],\r\n    formValues: state.newJob.userName\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(CategoryEdit);\r\n\r\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { clearLocalStorage } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\nclass DeleteJob extends React.Component {\r\n\r\n  state = { cancel: false, toPath: false }\r\n\r\n  //Remove localStorage and indexDB data, redirect to createJob page\r\n  resetData = async () => {\r\n    this.props.clearLocalStorage();\r\n    //console.log('Storage should be cleared: ',localStorage.getItem(\"state\"));\r\n    await db.delete();\r\n    this.setState({ toPath: true });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.resetData()} className=\"ui button negative\">New Job</button>\r\n        <Link to=\"/categories\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/categories\"/>\r\n    }\r\n    else if (this.state.toPath){\r\n      return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Detected previous session.  Delete old photos?'\r\n          content='You have session data.  If you create a new job, you will lose all the photos you took from your previous session.  Delete photos and create a new job?'\r\n          path='/categories'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default connect(null, { clearLocalStorage })(DeleteJob);\r\n","import React from 'react';\r\nimport Modal from '../Modal';\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { updateCatUploadStatus } from '../../actions';\r\n\r\nimport uploadImage from '../../apis/uploadImage';\r\nimport db from '../../database/db';\r\n\r\nimport { withToastManager } from 'react-toast-notifications';\r\n\r\nclass UploadAll extends React.Component {\r\n\r\n  state = { cancel: false }\r\n\r\n  /*\r\n  Upload all photos whose uploadStatus is \"False\"\r\n  1.  Get all photos from db whose uploadStatus is \"False\"\r\n  2.  For loop upload all of them\r\n\r\n  Notes:\r\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\r\n  */\r\n\r\n  //Get photos w/ uploadStatus: notUploaded\r\n  //call uploadFiles\r\n  getLocalPhotos = async () => {\r\n    const localPhotos = await db.photoDb.where('uploadStatus').equals('notUploaded').toArray();\r\n    //console.log('This is localPhotos: ', localPhotos);\r\n\r\n    this.uploadFiles(localPhotos);\r\n    //this.setState({ toPath: true });\r\n  }\r\n\r\n  //Upload all files\r\n  uploadFiles = async (localPhotos) => {\r\n\r\n    //re-direct back to category list\r\n    this.setState({ cancel: true });\r\n\r\n    let successArray = [];\r\n    let failArray = [];\r\n    this.toastSettings(`Uploading Files...`, 'info');\r\n\r\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\r\n    for(let i = 0; i<localPhotos.length; i++){\r\n      try{\r\n        //Set spinner for category to show user that upload is in progress\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        const photoCategory = tempArray[0];\r\n        this.props.updateCatUploadStatus(photoCategory, 'waiting');\r\n\r\n\r\n        await uploadImage(localPhotos[i].photo);\r\n        //Get categoryID from photo, add it to successArray\r\n        this.updateStatusTrue(localPhotos[i].photoId);\r\n        successArray.push(photoCategory);\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n        const tempArray = localPhotos[i].photoId.split('_');\r\n        failArray.push(tempArray[0]);\r\n        //console.log('this is failArray: ',failArray);\r\n      }\r\n    }\r\n\r\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\r\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\r\n    if(successArray.length !== 0){\r\n      this.toastSettings(`Uploaded images!`, 'success');\r\n      //Only unique Categories\r\n      const uniqueSuccessCategories = [...new Set(successArray)];\r\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\r\n      //console.log(uniqueCategories);\r\n    }\r\n    if (failArray.length !== 0){\r\n      this.toastSettings(`Some images failed`, 'error');\r\n      const uniqueFailCategories = [...new Set(failArray)];\r\n      this.checkCategoryUploadStatus(uniqueFailCategories);\r\n    }\r\n  }\r\n\r\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\r\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\r\n  checkCategoryUploadStatus = async (categoriesArray) => {\r\n    for(let i = 0; i<categoriesArray.length; i++){\r\n      try{\r\n        const localCatPhotosCount = await db.photoDb\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${categoriesArray[i]}`;\r\n          })\r\n          .count();\r\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n        if(localCatPhotosCount === 0){\r\n          //Update status\r\n          //console.log('success');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success');\r\n        }\r\n        else{\r\n          //console.log('fail');\r\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail');\r\n        }\r\n      }\r\n      catch (e){\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Set photo uploadStatus to 'uploaded'\r\n  updateStatusTrue = async (imageId) => {\r\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\r\n    await db.photoDb.update(imageId, { uploadStatus: 'uploaded' });\r\n  }\r\n\r\n  //Get category uploadStatus\r\n  getStatus = (imageId) => {\r\n    return this.props.categories[imageId].catUploadStatus;\r\n  }\r\n\r\n\r\n\r\n  //Helper method:  simplify toast messages\r\n  toastSettings = (message, status) => {\r\n    this.props.toastManager.add(message, {\r\n      appearance: status,\r\n      autoDismiss: true,\r\n    });\r\n  }\r\n\r\n  renderActions(){\r\n    return(\r\n      <React.Fragment>\r\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\r\n        <Link to=\"/categories\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  render(){\r\n\r\n    if (this.state.cancel){\r\n      return <Redirect to=\"/categories\"/>\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Modal\r\n          title='Upload local photos'\r\n          content='Upload all photos that have not been uploaded yet?'\r\n          path='/categories'\r\n          actions={this.renderActions()}\r\n          onDismiss={() => this.setState({ toPath: true })}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return{\r\n    categories: Object.values(state.categories),\r\n  };\r\n}\r\n\r\n//Enable toast for this component\r\nconst toastManager = withToastManager(UploadAll);\r\n\r\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <ToastProvider>\r\n      <p>v0.3.0</p>\r\n      <div className=\"ui container\" style={{ marginTop: '10px' }}>\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/\" exact component={CreateJob}/>\r\n            <Route path=\"/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n            <Route path=\"/upload\" exact component={UploadAll}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport newJobReducer from './newJobReducer';\r\nimport categoriesReducer from './categoriesReducer';\r\nimport toUploadReducer from './toUploadReducer';\r\nimport clearStorageReducer from './clearStorageReducer';\r\nimport pageLocationReducer from './pageLocationReducer';\r\n\r\nconst appReducer = combineReducers({\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: categoriesReducer,\r\n  uploadQueue: toUploadReducer,\r\n  clearStorage: clearStorageReducer,\r\n  pageLocation: pageLocationReducer\r\n})\r\n\r\nconst rootReducer = (state, action ) => {\r\n  if (action.type === 'CLEAR_LOCALSTORAGE'){\r\n    state = undefined\r\n  }\r\n  return appReducer(state, action)\r\n}\r\n\r\nexport default rootReducer;\r\n","import _ from 'lodash';\r\nimport {\r\n  READ_TXT_FILE,\r\n  ENCODE_IMAGE,\r\n  GET_CATEGORY,\r\n  GET_LOCALSTORAGE,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    case ENCODE_IMAGE:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_CATEGORY:\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    case GET_LOCALSTORAGE:\r\n      return { ...state, categories: action.payload };\r\n    case UPDATE_PHOTOQTY:\r\n      return { ...state, [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          photoQty: action.payload.photoQty\r\n          //photoQueue: action.payload.photoQueue\r\n        }\r\n      };\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      return { ...state, [action.payload.id]: {\r\n        ...state[action.payload.id],\r\n        catUploadStatus: action.payload.status\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { TO_UPLOAD } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case TO_UPLOAD:\r\n      return { ...state, uploadQueue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  CLEAR_LOCALSTORAGE\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CLEAR_LOCALSTORAGE:\r\n      return { ...state, categories: undefined, newJob: undefined };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  SAVE_PAGELOCATION\r\n} from '../actions/types';\r\n\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case SAVE_PAGELOCATION:\r\n      return { ...state, yValue: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\n      registration.onupdatefound = () => {\n        //installing, returns a service worker whose .state property is installing\n        const installingWorker = registration.installing;\n        //If there's no service worker, exit\n        if (installingWorker == null) {\n          return;\n        }\n        //onstatechange, fired anytime .state property changes\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\nimport { offline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\n//import db from './database/db';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\nimport { getLocalStorage, setLocalStorage } from './localStorage';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistedState = getLocalStorage();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(\r\n    applyMiddleware(reduxThunk),\r\n    offline(offlineConfig)\r\n  )\r\n);\r\n\r\n//Need to save state anytime the store state changes\r\nstore.subscribe(() => {\r\n  setLocalStorage({\r\n    newJob: store.getState().newJob,\r\n    categories: store.getState().categories\r\n\r\n  });\r\n});\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n\r\nserviceWorker.register();\r\n","//Gets state from localStorage\r\nexport const getLocalStorage = () => {\r\n  //console.log('This is the action', localCategories);\r\n  try {\r\n    const localState = localStorage.getItem('state');\r\n    if (localState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(localState);\r\n  }catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n//Saves state to localStorage\r\nexport const setLocalStorage = (state) => {\r\n  try{\r\n    const localState = JSON.stringify(state);\r\n    localStorage.setItem('state', localState);\r\n  }catch (err) {\r\n    //write something\r\n  }\r\n}\r\n"],"sourceRoot":""}