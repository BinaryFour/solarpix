{"version":3,"sources":["categoryListFile","history.js","apis/files.js","components/InputForm.js","components/pages/CreateJob.js","actions/index.js","actions/types.js","components/pages/CategoryList.js","components/pages/CategoryEdit.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/textFileReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","createHistory","axios","create","baseURL","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","projectName","profileName","CreateJob","createNewJob","history","push","components_InputForm","initialValues","connect","type","payload","profile","CategoryList","readTextFile","categoryListFile","categories","map","category","key","id","title","description","renderList","state","values","textFile","asyncToGenerator","regenerator_default","mark","_callee","dispatch","categoryArray","wrap","_context","prev","next","files","get","sent","data","split","forEach","tempArray","obj","stop","_x","apply","arguments","CategoryEdit","App","style","marginTop","Router","basename","process","Route","path","exact","INITIAL_STATE","combineReducers","formReducer","newJob","length","undefined","action","objectSpread","console","log","_","mapKeys","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.fa055c85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/categoryListFile.7893b230.bin\";","import createHistory from 'history/createBrowserHistory';\r\n\r\nexport default createHistory();\r\n","import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'http://localhost:3000'\r\n});\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"solar\">Solar</option>\r\n          <option value=\"site-audit\">Site-Audit</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Name\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName){\r\n    errors.userName = 'You must enter a User Name';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createNewJob } from '../../actions';\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\nimport history from '../../history';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list\r\n  onSubmit = (formValues) => {\r\n    this.props.createNewJob(formValues);\r\n    history.push('/categories');\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'solar'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import files from '../apis/files';\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  CREATE_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY\r\n} from './types';\r\n\r\n//Submit button saves NewJob data\r\nexport const createNewJob = (userName, projectName, profileName) => {\r\n  return{\r\n    type: CREATE_JOB,\r\n    payload: {\r\n      userName: userName,\r\n      projectName: projectName,\r\n      profile: profileName\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//Reads text file\r\nexport const readTextFile = (textFile) => {\r\n  var rawFile = new XMLHttpRequest();\r\n  rawFile.open(\"GET\", textFile, true);\r\n\r\n\r\n  return{\r\n    type: READ_TXT_FILE,\r\n    payload: 'asdf'\r\n  }\r\n}\r\n*/\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    var categoryArray = [];\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id and title are the same (for now)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:tempArray[0], title:tempArray[0], description: tempArray[1]};\r\n        categoryArray.push(obj);\r\n      }\r\n    });\r\n    //console.log(categoryArray);\r\n    dispatch({type: READ_TXT_FILE, payload: categoryArray})\r\n}\r\n\r\n\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:1, title:'Category 1', description: 'a1'},\r\n        {id:2, title:'Category 2', description: 'a2'},\r\n        {id:3, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const CREATE_JOB = 'CREATE_JOB';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile from '../../categoryListFile';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { readTextFile } from '../../actions';\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  componentDidMount(){\r\n    this.props.readTextFile(categoryListFile);\r\n\r\n  }\r\n\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <div className=\"item\" key={category.id}>\r\n          <i className=\"large middle aligned icon camera\" />\r\n          <div className=\"content\">\r\n            {category.title}\r\n            <div className=\"description\">{category.description}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\">{this.renderList()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    categories: Object.values(state.categories)\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile })(CategoryList);\r\n","import React from 'react';\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  \r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        CategoryEdit\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default CategoryEdit;\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { Router, Route } from 'react-router-dom';\r\nimport history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"ui container\" style={{ marginTop: '10px'}}>\r\n      <Router history={history} basename={process.env.PUBLIC_URL}>\r\n        <div>\r\n          <Route path=\"/\" exact component={CreateJob}/>\r\n          <Route path=\"/categories\" exact component={CategoryList}/>\r\n          <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport newJobReducer from './newJobReducer';\r\nimport textFileReducer from './textFileReducer';\r\n\r\nexport default combineReducers({\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: textFileReducer\r\n})\r\n","import { READ_TXT_FILE } from '../actions/types';\r\nimport _ from 'lodash';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n    console.log()\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}