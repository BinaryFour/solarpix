{"version":3,"sources":["apis/files.js","schemas/schemas.js","database/db.js","HOCs/NetworkDetector.js","apis/uploadImage.js","actions/index.js","actions/types.js","components/InputForm.js","components/pages/CreateJob.js","components/Footer.js","components/pages/CategoryList.js","components/Camera.js","components/Modal.js","components/pages/CategoryEdit.js","components/pages/DeleteJob.js","components/pages/UploadAll.js","components/pages/JobList.js","components/pages/SignIn.js","components/App.js","reducers/currentJobReducer.js","reducers/index.js","reducers/uploadStatusReducer.js","reducers/userReducer.js","reducers/categoriesReducer.js","reducers/jobReducer.js","reducers/pageLocationReducer.js","serviceWorker.js","index.js","localStorage.js","categoryListFile_install","categoryListFile_pcsv"],"names":["axios","create","baseURL","pictureReq","schema","Entity","job","pictureReqs","db","Dexie","version","stores","job1","job2","job3","job4","job5","job6","job7","job8","job9","job0","ComposedComponent","uploadImage","image","config","auth","username","password","crossDomain","formData","FormData","append","files","post","setJobCounter","increment","type","payload","setCurrentJob","jobId","updateCatUploadStatus","categoryId","status","photoReq","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","_this2","this","fields","map","field","Field","name","key","component","dropdown","validate","handleSubmit","renderList","React","Component","reduxForm","form","userValidation","undefined","CreateJob","state","toCategories","toDelete","getOpenJobId","currentJobs","jobs","keys","length","i","_","findKey","id","_callee","projName","jobIdNum","regenerator_default","wrap","_context","prev","next","projectName","toUpperCase","localStorage","getItem","includes","createJobList","profileName","Number","isInteger","addNewJob","console","log","setState","currentJob","stop","Redirect","to","components_InputForm","initialValues","connect","jobMeta","counter","jobCounter","pickBy","sessions","entities","e","asyncToGenerator","mark","_callee3","dispatch","colormap","categoryArray","superCatArray","response","uniqueSuperCats","colorCount","colors","pictureReqId","_context4","require","t0","get","categoryListFile_install","sent","abrupt","categoryListFile_pcsv","data","split","forEach","category","tempArray","obj","title","description","photoQty","catUploadStatus","push","toConsumableArray","Set","nshades","format","alpha","cellColor","parseInt","jobData","color","pictureReqData","categories","_x4","apply","arguments","_callee2","normalJobData","_context3","normalize","_x3","Footer","width","links","link","Link","path","style","classname","CategoryList","pageLocation","window","scrollTo","saveLocation","pageYOffset","backgroundColor","textAlign","success","fail","neutral","waiting","marginBottom","components_Footer","ownProps","currentJobId","currentPictureReqs","userName","userData","values","yValue","readTextFile","textFile","_ref4","_callee4","_context5","_x5","location","styles","display","Camera","handleImage","event","target","onChange","accept","htmlFor","Modal","ReactDOM","createPortal","show","onClick","stopPropagation","content","alt","src","actions","document","querySelector","CategoryEdit","_isMounted","testVar","match","params","showImage","imageTitle","imageId","imageQty","thumbnails","showModal","componentDidMount","isOpen","open","getThumbnails","countLocalPhotos","localCatPhotosCount","_context2","table","where","equals","and","result","photoId","count","onClickThumbnail","URL","createObjectURL","photo","uploadFile","toastSettings","updateStatusTrue","onAddPhoto","_callee5","img","renamedFile","startsWith","lastModified","File","saveToDb","_callee6","_context6","add","fileName","uploadStatus","_callee7","_context7","update","_callee8","_context8","toArray","updatePhotoQty","message","toastManager","appearance","autoDismiss","Fragment","_this3","imageURL","_this4","components_Modal","renderActions","onDismiss","components_Camera","withToastManager","getCategory","getState","addPhoto","photoQueue","DeleteJob","cancel","toPath","resetData","currentPictureReq","clear","deleteJob","es_Redirect","currentJobCounter","UploadAll","getLocalPhotos","localPhotos","uploadFiles","successArray","failArray","photoCategory","_tempArray","uniqueSuccessCategories","uniqueFailCategories","checkCategoryUploadStatus","categoriesArray","_loop","delegateYield","JobList","checkForPhotoCompletion","uploadedPhotosCount","jobPhotosCount","updateJobColor","onJobClick","onDeleteClick","sessionData","visibility","compact","SignIn","toJobList","setUsername","networkDetector","isDisconnected","updateUploadStatus","uploadAllPhotos","dist","marginTop","HashRouter","Route","exact","_Component","NetworkDetector","_getPrototypeOf2","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleConnectionChange","webPing","navigator","onLine","setInterval","fetch","mode","then","clearInterval","catch","inherits","createClass","addEventListener","removeEventListener","photoArray","uniqueSuccess","uniqueObjs","tables","j","photoData","k","x","JSON","stringify","parse","successUpload","_x","_x2","initialState","appReducer","combineReducers","action","objectSpread","newCount","categoryData","mapKeys","defineProperty","newState","formReducer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","persistedState","localState","err","getLocalStorage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","offline","offlineConfig","subscribe","setItem","setLocalStorage","render","es","components_App","process","href","origin","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.18880351.chunk.js","sourcesContent":["import axios from 'axios';\n\n//TODO change baseURL to actual URL when app is hosted\nexport default axios.create({\n  baseURL:  'http://localhost:3000'\n})\n","import { schema } from 'normalizr';\n//Root category defined at bottom, after deepest object defined first.\n\n//Define a categories schema\nconst pictureReq = new schema.Entity('pictureReqs');\n\n//Define a job schema\nconst job = new schema.Entity('jobs', {\n  pictureReqs: pictureReq\n});\n\n//Define a job array\n\nexport { job };\n//const normalizedData = normalize(localStorage.state, job);\n","import Dexie from 'dexie';\n\nconst db = new Dexie('empowerDb');\n\ndb.version(3).stores({\n    job1: `photoId, uploadStatus`,\n    job2: `photoId, uploadStatus`,\n    job3: `photoId, uploadStatus`,\n    job4: `photoId, uploadStatus`,\n    job5: `photoId, uploadStatus`,\n    job6: `photoId, uploadStatus`,\n    job7: `photoId, uploadStatus`,\n    job8: `photoId, uploadStatus`,\n    job9: `photoId, uploadStatus`,\n    job0: `photoId, uploadStatus`\n});\n\nexport default db;\n","/*\r\nhttps://www.codementor.io/nedson/a-guide-to-handling-internet-disconnection-in-react-applications-rs7u9zpwn\r\nThis component Code from this site\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\n\r\n//let isDisconnectedVar = false;\r\n\r\nexport default function (ComposedComponent) {\r\n  class NetworkDetector extends Component {\r\n    state = {\r\n      isDisconnected: false\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.handleConnectionChange();\r\n      window.addEventListener('online', this.handleConnectionChange);\r\n      window.addEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      window.removeEventListener('online', this.handleConnectionChange);\r\n      window.removeEventListener('offline', this.handleConnectionChange);\r\n    }\r\n\r\n\r\n    handleConnectionChange = async () => {\r\n      const condition = navigator.onLine ? 'online' : 'offline';\r\n      if (condition === 'online') {\r\n        const webPing = setInterval(\r\n          () => {\r\n            fetch('//google.com', {\r\n              mode: 'no-cors',\r\n              })\r\n            .then(() => {\r\n              this.setState({ isDisconnected: false }\r\n                , () => {\r\n                return clearInterval(webPing)\r\n              });\r\n            }).catch(() => this.setState({ isDisconnected: true }) )\r\n          }, 2000);\r\n        return;\r\n      }\r\n\r\n      return this.setState({ isDisconnected: true });\r\n    }\r\n\r\n    render() {\r\n      //return <ComposedComponent {...this.props}  isDisconnected={this.state.isDisconnected} />;\r\n\r\n      const { isDisconnected } = this.state;\r\n      return (\r\n        <div>\r\n          { isDisconnected && (<div className='ui block center aligned header' style={{ backgroundColor: 'orange' }}>\r\n              <p>Offline Mode (Pics will upload when network is restored)</p>\r\n            </div>)\r\n          }\r\n          <ComposedComponent {...this.props} isDisconnected={this.state.isDisconnected}/>\r\n        </div>\r\n      );\r\n\r\n    }\r\n  }\r\n\r\n  return NetworkDetector;\r\n}\r\n","import files from '../apis/files';\n\n//import axiosRetry from 'axios-retry';\n\nconst uploadImage = (image) => {\n\n  //axios retry for exponential back-off\n  //axiosRetry(files, { retryDelay: axiosRetry.exponentialDelay });\n\n\n  //Set up necessary parameters for POST to EmPower server\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\n  const url = 'http://upload.empower-solar.com/index2.php';\n\n  //Set up necessary parameters for CORS proxy\n  /*\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  await fetch(proxyurl + url)\n  .then(response => response.text())\n  .then(contents => console.log(contents))\n  .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\n  */\n\n  const config = {\n    auth: authParam,\n    crossDomain: true\n  }\n\n  const formData = new FormData();\n  formData.append('upload',image);\n\n  return files.post('https://cors-anywhere.herokuapp.com/' + url, formData, config);\n  //return axiosRetry(files)\n\n\n}\n\nexport default uploadImage;\n","import files from '../apis/files';\r\nimport categoryListFile_install from '../categoryListFile_install';\r\nimport categoryListFile_pcsv from '../categoryListFile_pcsv';\r\nimport { normalize } from 'normalizr';\r\nimport { job } from '../schemas/schemas';\r\nimport db from '../database/db';\r\nimport uploadImage from '../apis/uploadImage';\r\n\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  ADD_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY,\r\n  ADD_PHOTO,\r\n  TO_UPLOAD,\r\n  UPDATE_PHOTOQTY,\r\n  DELETE_JOB,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  SAVE_PAGELOCATION,\r\n  SET_USERNAME,\r\n  CREATE_JOBLIST,\r\n  SET_CURRENTJOB,\r\n  SET_JOBCOUNTER,\r\n  UPLOAD_ALLIMAGES,\r\n  UPLOAD_ALLIMAGES_STATUS,\r\n  UPDATE_JOBCOLOR\r\n} from './types';\r\n\r\nexport const updateJobColor = (job, color) => {\r\n\r\n  return {\r\n    type: UPDATE_JOBCOLOR,\r\n    payload: {\r\n      color: color,\r\n      jobId: job\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateUploadStatus = (status) => {\r\n\r\n  return {\r\n    type: UPLOAD_ALLIMAGES_STATUS,\r\n    payload: status\r\n  }\r\n}\r\n\r\n/*\r\nGet all photos that are not uploaded,\r\nfor loop upload them all.  On success, update the db entry and the category uploadStatus for the photo\r\n\r\n*/\r\nexport const uploadAllPhotos = () => async (dispatch, getState) => {\r\n\r\n  console.log('entered uploadAllPhotos');\r\n  if(!db.isOpen()){\r\n    db.open();\r\n  }\r\n  let photoArray = [];\r\n  let successArray = [];\r\n  let failArray = [];\r\n  let uniqueSuccess = [];\r\n  let uniqueObjs = [];\r\n  //See if there are photos w/ \"notUploaded\" status\r\n  //const photosToUpload = await db.table().where('uploadStatus').equals('notUploaded').toArray();\r\n  const tables = db.tables;\r\n  for(let i=0; i<tables.length; i++){\r\n    const tempArray = await db.table(tables[i].name).where('uploadStatus').equals('notUploaded').toArray();\r\n    photoArray = photoArray.concat(tempArray);\r\n  }\r\n  //console.log('This is photoArray: ', photoArray, photoArray.length);\r\n  //photoArray now has all photos\r\n  if(photoArray.length !== 0){\r\n    //begin automatic upload\r\n    for(let j=0; j<photoArray.length; j++){\r\n      const photoData = photoArray[j];\r\n      try{\r\n        //Upload photo, update db status\r\n        dispatch(updateCatUploadStatus(photoData.photoId[0], 'waiting', photoData.pictureReq));\r\n        await uploadImage(photoData.photo);\r\n        await db.table(photoData.job).update(photoData.photoId, { uploadStatus: 'uploaded' });\r\n        successArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        //updateCatUploadStatus(categoryId, 'success', photoData.pictureReq);\r\n\r\n      }\r\n      catch (e){\r\n        failArray.push({ job: photoData.job, pictureReq: photoData.pictureReq, categoryId: photoData.photoId[0] });\r\n        console.log(e);\r\n      }\r\n    }\r\n    console.log('successArray', successArray, 'failArray', failArray);\r\n    //After for loop finishes, Get all unique uploads and update all category upload icons (code from CategoryEdit)\r\n    try{\r\n      uniqueSuccess = [...new Set(successArray.map(x => JSON.stringify(x)))];\r\n      uniqueObjs = [...new Set(uniqueSuccess.map(x => JSON.parse(x)))];\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n\r\n    console.log('uniqueObjs', uniqueObjs);\r\n    for(let k=0; k<uniqueObjs.length; k++){\r\n      const successUpload = uniqueObjs[k];\r\n      let status = 'neutral';\r\n\r\n      try{\r\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\r\n        const localCatPhotosCount = await db.table(successUpload.job)\r\n          .where('uploadStatus').equals('notUploaded')\r\n          .and((result) => {\r\n            //console.log('result ',result);\r\n            const tempArray = result.photoId.split('_');\r\n            return tempArray[0] === `${successUpload.categoryId}`;\r\n          })\r\n          .count();\r\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\r\n\r\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\r\n        if(localCatPhotosCount === 0){\r\n          //console.log('Query found no photos: Success');\r\n          status = 'success';\r\n        }\r\n        else{\r\n          //console.log('Query found photos: Fail');\r\n          status = 'fail';\r\n        }\r\n        //update status\r\n        dispatch(updateCatUploadStatus(successUpload.categoryId, status, successUpload.pictureReq));\r\n      }\r\n      catch (e) {\r\n        console.log('Query failed: ',e);\r\n      }\r\n    }\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n  else{\r\n    //dispatch(updateUploadStatus(''));\r\n  }\r\n\r\n\r\n\r\n\r\n  dispatch({ type: UPLOAD_ALLIMAGES, payload:  0 });\r\n\r\n}\r\n\r\nexport const setJobCounter = (increment) => {\r\n\r\n  return{\r\n    type: SET_JOBCOUNTER,\r\n    payload: increment\r\n  }\r\n}\r\n\r\nexport const setCurrentJob = (jobId) => {\r\n\r\n  return{\r\n    type: SET_CURRENTJOB,\r\n    payload: jobId\r\n  }\r\n}\r\n\r\nexport const setUsername = (userName) => {\r\n  return{\r\n    type: SET_USERNAME,\r\n    payload: userName\r\n  }\r\n}\r\n\r\n//Saves window page y so that users return to the same location on categoryList page\r\nexport const saveLocation = (location) => {\r\n\r\n  return{\r\n    type: SAVE_PAGELOCATION,\r\n    payload: location\r\n  }\r\n}\r\n\r\n//Sets category property 'uploadStatus'.  Used to show unique icon\r\nexport const updateCatUploadStatus = (categoryId, status, photoReq) => {\r\n\r\n  return{\r\n    type: UPDATE_CATUPLOADSTATUS,\r\n    payload: {\r\n      status: status,\r\n      categoryId: categoryId,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//Delete job, pictureReqs for jobId (db table deleted in DeleteJob component)\r\nexport const deleteJob = (jobId, pictureReq) => {\r\n  //window.localStorage.clear();\r\n  //\r\n\r\n  return{\r\n    type: DELETE_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReq: pictureReq\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n//UNUSED: save in case we need upload image response in store\r\nexport const uploadImage = (image) => async (dispatch, getState) => {\r\n\r\n  //Set up necessary parameters for POST to EmPower server\r\n  const authParam = { username: 'upload', password: 'nD2Qm9t4' };\r\n  //const params = { name: 'upload', filname: 'test_Filename' }\r\n  const url = 'http://upload.empower-solar.com/index2.php';\r\n\r\n  //Set up necessary parameters for CORS proxy\r\n  const config = {\r\n    auth: authParam\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append('upload',image);\r\n\r\n  try{\r\n    const response = await files.post(url, formData, config);\r\n    dispatch({ type: UPLOAD_IMAGE, payload: response.data });\r\n  }\r\n  catch(err){\r\n    console.log('POST failed: ', err);\r\n  }\r\n\r\n};\r\n*/\r\n\r\nexport const updatePhotoQty = (categoryId, photoQty, photoReq) => {\r\n  return{\r\n    type: UPDATE_PHOTOQTY,\r\n    payload: {\r\n      categoryId: categoryId,\r\n      photoQty: photoQty,\r\n      photoReq: photoReq\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Add image to uploadQueue\r\nexport const toUploadQueue = (id, dataURL) => {\r\n\r\n  return {\r\n    type: TO_UPLOAD,\r\n    payload: {\r\n      id: id,\r\n      dataURL: dataURL,\r\n      uploadStatus: false\r\n    }\r\n  }\r\n}\r\n\r\n//UNUSED\r\n//Adds photo to photoQueue for specific category\r\nexport const addPhoto = (id, photoQty, photoQueue) => {\r\n\r\n  return{\r\n    type: ADD_PHOTO,\r\n    payload: {\r\n      id: id,\r\n      photoQty: photoQty,\r\n      photoQueue: photoQueue\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/*\r\n1.  Create object array using text file based on profileName\r\n2.  For every superCategory, add a unique color to all categories\r\n3.  Create normalized object to put into store (job -> photoReqs)\r\n*/\r\n\r\n//TODO:  Perform steps 1 & 2 once for all unique profileNames, then store the data in the store(?) for future use\r\nexport const createJobList = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: {\r\n        id: pictureReqId, jobId: jobId, categories: categoryArray\r\n      },\r\n    color: ''\r\n  }\r\n\r\n  const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: CREATE_JOBLIST,\r\n    payload: normalJobData\r\n  })\r\n/*\r\n\r\n  return{\r\n    type: CREATE_JOBLIST,\r\n    payload:\r\n      { [initialJobId]:\r\n        {\r\n          id: initialJobId,\r\n          projectName: projectName,\r\n          profileName: profileName\r\n        }\r\n      }\r\n  }\r\n*/\r\n}\r\n\r\n//Submit button saves NewJob data\r\nexport const addNewJob = (projectName, profileName, jobCounter) => async (dispatch) => {\r\n\r\n  //const initialJobId = 'job1';\r\n  let colormap = require('colormap');\r\n\r\n  var categoryArray = [];\r\n  var superCatArray = [];\r\n  var counter = 0;\r\n\r\n  //Choose which categorylistFile to choose based on profileName\r\n  let response;\r\n  switch(profileName){\r\n    case 'install':\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n    case 'pcsv':\r\n      response = await files.get(categoryListFile_pcsv);\r\n      break;\r\n\r\n    default:\r\n      response = await files.get(categoryListFile_install);\r\n      break;\r\n\r\n  }\r\n\r\n  //create array of strings\r\n  var textArray = response.data.split(/\\n/);\r\n  //For each String, split string into id/title/description properties\r\n  //id generated by counter (dynamic for categorylist future proofing)\r\n  textArray.forEach( category => {\r\n    //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n    if(category){\r\n      var tempArray = category.split(\"|\");\r\n      var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n      categoryArray.push(obj);\r\n      superCatArray.push(obj.title[0]);\r\n      counter += 1;\r\n    }\r\n  });\r\n\r\n  //Assigning unique colors for each supercategory\r\n  const uniqueSuperCats = [...new Set(superCatArray)];\r\n  let colorCount = 11\r\n  if(uniqueSuperCats.length > 11){\r\n    colorCount = uniqueSuperCats.length;\r\n  }\r\n  let colors = colormap({\r\n    colormap: 'hsv',\r\n    nshades: colorCount,\r\n    format: 'rgba',\r\n    alpha: 0.2\r\n  })\r\n  //console.log(colors)\r\n\r\n  categoryArray.forEach( category => {\r\n    category.cellColor = colors[parseInt(category.title[0])];\r\n  });\r\n\r\n\r\n  const jobId = `job${jobCounter}`\r\n  const pictureReqId = `pictureReq${jobCounter}`\r\n\r\n  const jobData = {\r\n    id: jobId,\r\n    projectName: projectName,\r\n    profileName: profileName,\r\n    pictureReqs: pictureReqId,\r\n    color: ''\r\n  }\r\n\r\n  const pictureReqData = {\r\n    id: pictureReqId,\r\n    jobId: jobId,\r\n    categories: categoryArray\r\n  }\r\n\r\n  //const normalJobData = normalize(jobData, job);\r\n  //console.log(normalJobData);\r\n\r\n  dispatch({ type: ADD_JOB,\r\n    payload: {\r\n      jobId: jobId,\r\n      pictureReqId: pictureReqId,\r\n      jobData: jobData,\r\n      pictureReqData: pictureReqData\r\n    }\r\n  })\r\n}\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\n\r\n\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    let colormap = require('colormap');\r\n\r\n    var categoryArray = [];\r\n    var superCatArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1], photoQty: 0, catUploadStatus: 'neutral' };\r\n        categoryArray.push(obj);\r\n        superCatArray.push(obj.title[0]);\r\n        counter += 1;\r\n      }\r\n    });\r\n\r\n    //Assigning unique colors for each supercategory\r\n    const uniqueSuperCats = [...new Set(superCatArray)];\r\n    let colorCount = 11\r\n    if(uniqueSuperCats.length > 11){\r\n      colorCount = uniqueSuperCats.length;\r\n    }\r\n    let colors = colormap({\r\n      colormap: 'hsv',\r\n      nshades: colorCount,\r\n      format: 'rgba',\r\n      alpha: 0.2\r\n    })\r\n    //console.log(colors)\r\n\r\n    categoryArray.forEach( category => {\r\n      category.cellColor = colors[parseInt(category.title[0])];\r\n    });\r\n\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  //console.log(getState());\r\n  const currentJobId = getState().currentJob;\r\n  const currentPictureReqs = getState().sessions.entities.jobs[currentJobId].pictureReqs;\r\n\r\n  const category = getState().sessions.entities.pictureReqs[currentPictureReqs].categories[id];\r\n  //const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const ADD_JOB = 'ADD_JOB';\r\nexport const CREATE_JOBLIST = 'CREATE_JOBLIST';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\nexport const ENCODE_IMAGE = 'ENCODE_IMAGE';\r\nexport const ADD_PHOTO = 'ADD_PHOTO';\r\nexport const GET_LOCALSTORAGE = 'GET_LOCALSTORAGE';\r\nexport const TO_UPLOAD = 'TO_UPLOAD';\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const UPDATE_PHOTOQTY = 'UPDATE_PHOTOQTY';\r\nexport const DELETE_JOB = 'DELETE_JOB';\r\nexport const UPDATE_CATUPLOADSTATUS = 'UPDATE_CATUPLOADSTATUS';\r\nexport const SAVE_PAGELOCATION = 'SAVE_PAGELOCATION';\r\nexport const SET_USERNAME = 'SET_USERNAME';\r\nexport const SET_CURRENTJOB = 'SET_CURRENTJOB';\r\nexport const SET_JOBCOUNTER = 'SET_JOBCOUNTER';\r\nexport const REFRESH_STORE = 'REFRESH_STORE';\r\nexport const UPLOAD_ALLIMAGES = 'UPLOAD_ALLIMAGES';\r\nexport const UPLOAD_ALLIMAGES_STATUS = 'UPLOAD_ALLIMAGES_STATUS';\r\nexport const UPDATE_JOBCOLOR = 'UPDATE_JOBCOLOR';\r\n","/*\nInputForm - Re-usable menu/form\n\nPurpose:\nProvides a form template to be used in the app.\n2 input bars\n1 dropdown\n1 Button\n\n*/\n\n//import necessary packages\nimport React from 'react';\nimport {Field, reduxForm } from 'redux-form';\n\nclass InputForm extends React.Component{\n\n  componentDidMount(){\n\n  }\n\n  //Helper method: renderError\n  //Handles when to display an error message\n  renderError({ error, touched }){\n    if (touched && error){\n      return(\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  }\n\n  //Helper method: renderInput\n  //renders an input InputBar.  Depending on error message criteria, show error style\n  renderInput = ({label, input, meta}) => {\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\"/>\n        {this.renderError(meta)}\n      </div>\n    );\n  }\n\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\n  //renders a dropdown menu\n  renderDropdown = ({label, input, meta}, props) => {\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return(\n      <div className={className} >\n        <label>{label}</label>\n        <select {...input}>\n          <option value=\"install\">Install</option>\n          <option value=\"pcsv\">PCSV</option>\n        </select>\n        {this.renderError(meta)}\n      </div>\n    );\n  }\n\n  //Run onClick when user clicks on button\n  onSubmit = (formValues) => {\n    //console.log('Input form onSubmit: ',formValues);\n    this.props.onSubmit(formValues);\n\n  }\n\n\n\n  //render dynamic field list\n  renderList(){\n    return this.props.fields.map( field => {\n      return(\n        <Field name={field.name} label={field.label} key={field.key} component=\n        {{\n          input: this.renderInput,\n          dropdown: this.renderDropdown\n        }[field.component]}\n        validate={field.validate}\n        />\n      );\n    });\n  }\n\n  //Render page layout\n  render(){\n    //console.log('this is props: ',this.props);\n    return(\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        {this.renderList()}\n        <br/>\n        <button className=\"fluid ui button primary\">Submit</button>\n      </form>\n    );\n  }\n  /*\n  render(){\n    console.log('this is props: ',this.props);\n    return(\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        {this.renderList()}\n        <Field name=\"userName\" label=\"User Initials\" component={this.renderInput}/>\n        <Field name=\"projectName\" label=\"Project Name (try to use one word, all use same)\" component={this.renderInput}/>\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\n        <br/>\n        <button className=\"ui button primary\">Submit</button>\n      </form>\n    );\n  }\n  */\n}\n\n\n//Helper method: validate\n//Used for validation\n/*\nUser Name or Project Name cannot be blank\n\n*/\n\n/*\nconst validate = (formValues) => {\n  const errors = {};\n\n  //console.log(formValues.profileName);\n\n  if (!formValues.userName || formValues.userName.length > 3){\n    errors.userName = 'You must enter a User Name (Max 3 characters)';\n  }\n  if (!formValues.projectName){\n    errors.projectName = 'You must enter a Project Name';\n  }\n  if (!formValues.profileName){\n    errors.profileName = 'You must select a Profile';\n  }\n\n  return errors;\n\n}\n*/\n//Wire up ReduxForm\nexport default reduxForm({\n  form: 'inputForm'\n})(InputForm);\n","/*\nCreateJob - First menu that shows to user.\n\nPurpose:\nUser inputs User Name, Project Name, and Profile.\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\n\n*/\n\n//import necessary packages\nimport React from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { addNewJob, createJobList, setCurrentJob, setJobCounter } from '../../actions';\n\n//Import local components\nimport InputForm from '../InputForm';\n//import database from '../../database/db';\n\nconst userValidation = value => (value ? 'You must enter a Project Name' : undefined)\n\nclass CreateJob extends React.Component{\n\n  state = { toCategories: false, toDelete: false, jobId: '' }\n\n  //TODO:  If there is localStorage, ask user if they want to start a new job or return to their previous one\n  //If new job, clear localStorage\n  //If old job, re-direct to /categories page\n  componentDidMount(){\n    //console.log(this.props.jobs);\n    /*\n    try{\n      if(!localStorage.getItem(\"state\").includes(`\"categories\":{}`) || db.isOpen()){\n        this.setState({ toDelete: true });\n      }\n    } catch (err) {\n      //catch error.  If state is null, create new categories list\n      console.log(err);\n    }\n    */\n  }\n\n  /*\n  createNewDb = async (jobId) => {\n    try{\n      if(!db.isOpen()){\n        await db.open();\n      }\n      db.close();\n      console.log('dbVerNo: ',db.verno, ' dbVerNo+1: ',db.verno+1);\n      await db.version(db.verno+1).stores({\n          [jobId]: `photoId, uploadStatus`\n      });\n      db.open();\n\n    }\n    catch(e){\n      console.log('db creation failed', e);\n    }\n  }\n  */\n\n  /*\n  createDb = (jobId) => {\n    const dataBase = new Dexie('empowerDb');\n\n    this.props.createDatabase(dataBase);\n\n    const db = this.props.db;\n    db.version(db.verno+1).stores({\n      [jobId]: `photoId, uploadStatus`\n    })\n    db.open();\n  }\n\n  createDbTable = (jobId) => {\n    const db = this.props.db;\n    if(db.isOpen()){\n      db.close();\n    }\n    db.version(db.verno+1).stores({\n      [jobId]: `photoId, uploadStatus`\n    })\n    db.open();\n  }\n  */\n  getOpenJobId = () => {\n    const currentJobs = this.props.jobs;\n    if(Object.keys(this.props.jobs).length >= 10){\n      return null;\n    }\n    else{\n      //Find an available jobId slot (starting from 0, asc);\n      for(var i=0; i<10; i++){\n        if(!_.findKey(currentJobs, { id: `job${i}` })){\n            //console.log(`should be the first non-existing jobId`);\n            return i;\n        }\n      }\n    }\n\n  }\n\n  //Callback function to InputForm\n  //On form Submit, save formValues to store and navigate user to categories list (Set userName to capitals)\n  onSubmit = async (formValues) => {\n    const projName = formValues.projectName.toUpperCase();\n    //If there are no current jobs, create jobList w/ normalized data\n    if(localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\n      await this.props.createJobList(projName, formValues.profileName, 0);\n      await this.props.setCurrentJob(`job0`);\n    }\n    //Otherwise, create a new job and merge data w/ store\n    else{\n      const jobIdNum = this.getOpenJobId();\n      //console.log(jobIdNum);\n      if(Number.isInteger(jobIdNum)){\n        await this.props.addNewJob(projName, formValues.profileName, jobIdNum);\n        await this.props.setCurrentJob(`job${jobIdNum}`);\n      }\n      else{\n        //prevent user from creating another job\n        console.log('There are already 10 jobs');\n      }\n    }\n    //this.props.setJobCounter(1);\n    //this.createNewDb(this.props.currentJob);\n\n\n    //set state to true for navigation\n    this.setState({ toCategories: true, jobId: this.props.currentJob });\n  }\n\n  //Render page layout\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\n  render(){\n    if(this.state.toCategories === true){\n      return <Redirect to={`/${this.state.jobId}/categories`} />\n    }\n    else if(this.state.toDelete === true){\n      return <Redirect to='/delete' />\n    }\n\n    return(\n      <div>\n        <h1>New Job</h1>\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'install' }}\n        fields={\n          [\n            {\n            name: 'projectName',\n            label: 'Project Name (try to use one word, all use same)',\n            component: 'input',\n            key: 'field1',\n            validate: userValidation\n            },\n            {\n            name: 'profileName',\n            label: 'Profile',\n            component: 'dropdown',\n            key: 'field2'\n            }\n          ]\n        }\n        //TODO: pass down field information\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\n  try{\n    return{\n      currentJob: state.jobMeta.currentJob,\n      counter: state.jobMeta.jobCounter,\n      jobs: _.pickBy(state.sessions.entities.jobs, undefined),\n    }\n  }\n  catch (e){\n    console.log('jobs dont exist yet');\n    return{\n      currentJob: state.jobMeta.currentJob,\n      counter: state.jobMeta.jobCounter,\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, { addNewJob, createJobList, setCurrentJob, setJobCounter })(CreateJob);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Footer extends React.Component{\n\n\n  //Renders list of links to be displayed in footer\n  renderList(props) {\n    //determine width of each button based on number of buttons\n    const width = `${100/this.props.links.length}%`;\n\n    return this.props.links.map( link => {\n      return(\n        <Link to={link.path} className=\"item\" key={link.id} style={{ width: width }}>\n          {link.label}\n        </Link>\n      );\n    });\n  }\n\n  render(){\n    const classname = `ui bottom fixed ${this.props.links.length} item huge menu`\n    return(\n      <div className={classname}>\n        {this.renderList()}\n      </div>\n    )\n  }\n}\n\nexport default Footer;\n","/*\nCategoryList - Main working menu that shows categories\n\nPurpose:\nUser clicks category in order to open their mobile camera.\nUser can choose to upload(?) photos\n\n*/\n\nimport React from 'react';\n\n//import categoryListFile_install from '../../categoryListFile_install';\n//import categoryListFile_pcsv from '../../categoryListFile_pcsv';\n\n\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { readTextFile, saveLocation } from '../../actions';\n\n//import db from '../../database/db';\nimport Footer from '../Footer';\n//import offline from 'offline-js';\n\n//Used for filling in footer\nconst links = [\n  { path: '/joblist', id: 'jobList', label: 'Back' },\n  { path: '/upload', id: 'uploadAll', label: 'Upload All' }\n]\n\n//Used for deciding which icon to show for category Upload status\n//const catUploadStatuses =\n\n\nclass CategoryList extends React.Component{\n\n  //If there is no localStorage, read text file and create categories.  Categories dependent on profileName\n  //Then save to localStorage\n  //Otherwise, load categories from localStorage\n  componentDidMount(){\n    //console.log(this.props.sessions);\n    //If there is a saved page location, send user back to that position\n    if(this.props.pageLocation){\n      window.scrollTo(0, this.props.pageLocation);\n    }\n  }\n\n  componentWillUnmount(){\n    //save page position\n    //console.log('Y offset ', window.pageYOffset);\n    this.props.saveLocation(window.pageYOffset);\n  }\n\n\n  //Renders list of categories and sets each to be a link to individual category page\n  //change icons based on catUploadStatus\n  renderList() {\n    return this.props.categories.map( category => {\n      return(\n        <Link to={`categories/${category.id}`} className=\"item\" key={category.id} style={{ backgroundColor:\n          `rgba(${category.cellColor[0]},${category.cellColor[1]},${category.cellColor[2]},${category.cellColor[3]})` }}>\n            <div className=\"right floated middle aligned content\">\n              <div className=\"description\">\n                Pics\n                <div style={{ textAlign: 'center' }}>\n                  {category.photoQty}\n                </div>\n              </div>\n            </div>\n          {{\n            success: <i className='large middle aligned inverted green check icon'></i>,\n            fail: <i className='large middle aligned inverted red x icon'></i>,\n            neutral: <i className='large middle aligned inverted gray minus icon'></i>,\n            waiting: <i className='large middle aligned cog loading icon'></i>\n          }[category.catUploadStatus]}\n          <div className=\"content\" >\n            <div className=\"header\">{category.title}</div>\n              <div className=\"description\">\n                {category.description}\n              </div>\n          </div>\n        </Link>\n      );\n    });\n  }\n\n  //Render component calling renderList\n  render(){\n    return(\n      <div>\n        <h2>Category List: {this.props.job.projectName}</h2>\n        <div className=\"ui celled list\" style={{ marginBottom: '48px'}}>{this.renderList()}</div>\n        <Footer links={links}/>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n  const currentJobId = state.jobMeta.currentJob;\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\n\n  return{\n    //categories: Object.values(state.categories),\n    userName: state.userData,\n    job: state.sessions.entities.jobs[currentJobId],\n    categories: Object.values(state.sessions.entities.pictureReqs[currentPictureReqs].categories),\n    pageLocation: state.pageLocation.yValue,\n\n  };\n}\n\nexport default connect(mapStateToProps, { readTextFile, saveLocation })(CategoryList);\n","/*\nCamera - Renders a 'Take Photo' button that prompts user Camera\n\nPurpose:\nGet photo from user camera.  Hand off photo file through callback\n\n*/\n\nimport React from 'react';\n\nconst styles = {\n  display: 'none'\n};\n\nclass Camera extends React.Component {\n\n  //Callback function.  Returns taken photo\n  handleImage = (event) => {\n    this.props.onSubmit(event.target.files[0]);\n  }\n\n  //Render input tag 'Take Photo' to allow user to take photo with their camera\n  render (){\n    return(\n      <div className=\"ui labeled big input\">\n        <input className=\"inputfile\" id=\"file\" onChange={this.handleImage} type=\"file\" accept=\"image/*;capture=camera\" style={styles}/>\n        <label className=\"ui button large primary\" htmlFor=\"file\">Take Photo</label>\n      </div>\n    );\n  }\n}\n\nexport default Camera;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Modal extends React.Component{\n\n  render(){\n    return ReactDOM.createPortal(\n      <div className=\"ui dimmer modals visible active\" style={{display: this.props.show}}>\n        <div onClick={(e) => e.stopPropagation()} className=\"ui standard modal visible active\">\n          <div className=\"header\">{this.props.title}</div>\n          <div className=\"content\">{this.props.content}</div>\n          <img className=\"ui medium rounded centered image\" alt=\"\" src={this.props.image} style={{ marginBottom: '10px'}}/>\n          <div className=\"actions\">{this.props.actions}</div>\n        </div>\n      </div>,\n      document.querySelector('#modal')\n    )\n  }\n}\n\nexport default Modal;\n","/*\nCategoryEdit - Individual Category look\n\nPurpose:\nUser able to take photos and edit existing photos for this category.\n\nPhoto file title syntax \"projectName_title_imgQty_user\"\n\n*/\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus } from '../../actions';\nimport { withToastManager } from 'react-toast-notifications';\n\nimport db from '../../database/db';\nimport Camera from '../Camera';\nimport Footer from '../Footer';\nimport Modal from '../Modal';\n\n\nimport uploadImage from '../../apis/uploadImage';\n//import detectConnection from '../detectConnection';\n\n//USED to be used for footer lol\n/*\nconst links = [\n  { path: `/categories`, id:'categoryList', label: 'Back' }\n];\n*/\n/*\nColor Hex Codes:\n\nRed: DB2828\nYellow: FBBD08\nBlue: 2185D0\nOrange: F2711C\nGreen: 21BA45\n*/\n\nclass CategoryEdit extends React.Component {\n\n  //Apparently this is bad practice, but I can't think of an alt right now.  Variable checks for component life cycle state.  Used for preventing setState when unmounted\n  _isMounted = false;\n  testVar = false;\n\n  state = {\n    categoryId: this.props.match.params.id,\n    image: {},\n    showImage: '',\n    imageTitle: '',\n    imageId:'',\n    imageQty: '',\n    thumbnails: [],\n    showModal: 'none'\n  };\n\n  //Fetch the category data from store\n  //Get the photoQty and existing thumbnails\n  //TODO:  If you delete the db, getThumbnails throws an error.  Check for that.\n  componentDidMount = async () =>{\n    //console.log(this.props.category);\n    this._isMounted = true;\n    //this.props.getCategory(this.state.categoryId);\n    if(!db.isOpen()){\n      await db.open();\n    }\n    this.getThumbnails();\n  }\n\n  //if the component unmounts, cancel any setState calls\n  //Update state w/ uploadStatus: unsent:fail, sentAll:success, default:neutral\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.countLocalPhotos();\n  }\n\n  //Counts the amount of not-Uploaded photos in this category.  Sets store value\n  countLocalPhotos = async () => {\n    //console.log('Entered countLocalPhotos');\n    const photoQty = this.props.category.photoQty;\n\n    //If there are no photos, do nothing\n    if (photoQty !== 0){\n      let status = 'neutral';\n      try{\n        //This query grabs all photos in this category whose uploadStatus is 'notUploaded'\n        const localCatPhotosCount = await db.table(this.props.currentJob)\n          .where('uploadStatus').equals('notUploaded')\n          .and((result) => {\n            //console.log('result ',result);\n            const tempArray = result.photoId.split('_');\n            return tempArray[0] === `${this.state.categoryId}`;\n          })\n          .count();\n        //console.log('This is localCatPhotosCount: ', localCatPhotosCount);\n\n        //If there are no photos, all photos are uploaded, otherwise, there are still local photos\n        if(localCatPhotosCount === 0){\n          //console.log('Query found no photos: Success');\n          status = 'success';\n        }\n        else{\n          //console.log('Query found photos: Fail');\n          status = 'fail';\n        }\n        //update status\n        this.props.updateCatUploadStatus(this.state.categoryId, status, this.props.job.pictureReqs);\n      }\n      catch (e) {\n        console.log('Query failed: ',e);\n\n      }\n    }\n    //console.log('localCatPhotosCount', localCatPhotosCount);\n  }\n\n  //When user clicks on existing photo, open modal\n  //TODO: modal options (re-take or delete)\n  onClickThumbnail = async (image) => {\n    //if(!image.uploadStatus){\n      const showImage = URL.createObjectURL(image.photo);\n      await this.setState({ showModal: '', image: image.photo, showImage: showImage, imageId: image.photoId });\n  }\n\n  //Upload individual file from thumbnails.  Relies on state.image/state.imageId\n  uploadFile = async () => {\n    const imageId = this.state.imageId;\n    const image = this.state.image;\n    await this.setState({\n              showModal: 'none',\n              image: {},\n              showImage: '',\n              imageId: ''\n            })\n    this.toastSettings(`Uploading File...`, 'info');\n    try{\n      await uploadImage(image);\n      this.toastSettings('Uploaded Image!','success');\n      this.updateStatusTrue(imageId);\n\n      if(this._isMounted){\n        this.getThumbnails();\n      }\n    }\n    catch (e){\n      console.log(e);\n      this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\n      //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\n    }\n  }\n\n  //callback to Camera to get Added photo file.  Create photo file name\n  onAddPhoto = async (img) => {\n    if(img.type.startsWith('image')){\n      const job = this.props.job;\n      const userName = this.props.userName;\n\n      const imageQty = this.state.imageQty + 1;\n      const imageTitle = `${job.projectName}-${job.profileName}_${this.props.category.title}-${imageQty}_${userName}`;\n      const imageId = `${this.state.categoryId}_${img.lastModified}`;\n      //Set current imageId to lastmodified date and rename file\n      const renamedFile = new File([img], imageTitle+'.jpeg', {type: img.type} );\n      //console.log('This is imageTitle: ',imageTitle,'This is renamedFile: ',renamedFile);\n      await this.setState({ imageTitle: imageTitle, imageId: imageId });\n      //Save file to db, upload photo to server, refresh current page w/ thumbnails\n      try{\n        //If saveToDb fails, notify user w/ error code.\n        this.saveToDb(renamedFile);\n        this.getThumbnails();\n      }catch(error){\n        this.toastSettings(`Screenshot this and send to your dev ${error}`, 'error');\n      }\n      this.toastSettings(`Uploading File...`, 'info');\n\n      try{\n        //Upload succeeded, set uploadStatus to 'True' in indexdb and queue file for deletion\n        await uploadImage(renamedFile);\n        this.toastSettings('Uploaded Image!','success');\n        this.updateStatusTrue(imageId);\n        //This causes issues if component unmounts.  Illegal setState\n        if(this._isMounted){\n          this.getThumbnails();\n        }\n      }\n      catch (e){\n        console.log(e);\n        this.toastSettings('Image upload fail.  You can click on an thumbnail to re-attempt upload','error');\n        //Upload failed, keep uploadStatus as 'False' and add image to offline image queue\n      }\n    }\n    else{\n      //If user cancelled, don't do anything\n      //console.log('User cancelled image take/Wrong file type');\n      this.toastSettings('Only images can be accepted', 'warning');\n    }\n  }\n\n\n\n  //Saves image to db\n  saveToDb = async (img) => {\n    await db.table(this.props.currentJob).add({ photoId: `${this.state.imageId}`, fileName: this.state.imageTitle, uploadStatus: 'notUploaded', photo: img, job:this.props.currentJob, pictureReq: this.props.job.pictureReqs });\n    //TODO: do we need to refresh db?  Or is this just a chrome not updating thing 'data may be stale'\n  }\n\n  updateStatusTrue = async (imageId) => {\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\n  }\n\n  //Access db and return count: number of photos in category\n  //put thumbnails in state thumbnails and display\n  getThumbnails = async () => {\n    let thumbnails = [];\n    let photoQty = 0;\n    const categoryId = this.state.categoryId;\n    try{\n      thumbnails = await db.table(this.props.currentJob).where('photoId').startsWith(`${categoryId}_`).toArray();\n      photoQty = thumbnails.length;\n      //console.log('no error');\n    }\n    catch (e){\n      console.log('No Photos', e);\n    }\n    //Update store w/ photoQty value and rerender\n    this.props.updatePhotoQty(categoryId, photoQty, this.props.job.pictureReqs);\n    this.setState({ imageQty: photoQty, thumbnails: thumbnails });\n    //console.log(this.state.thumbnails);\n  }\n\n  //Helper method:  simplify toast messages\n  toastSettings = (message, status) => {\n    this.props.toastManager.add(message, {\n      appearance: status,\n      autoDismiss: true,\n    });\n  }\n\n\n\n  //render options for Modal\n  renderActions(){\n    return(\n      <React.Fragment>\n        <button onClick={() => this.uploadFile()} className=\"ui button primary\">Upload</button>\n        <button onClick={() => this.setState({\n          showModal: 'none',\n          image: {},\n          showImage: '',\n          imageId: ''\n        })} className=\"ui button\">Cancel</button>\n      </React.Fragment>\n    );\n  }\n\n  //render list of photos\n  renderList() {\n    return this.state.thumbnails.map( image => {\n      if(image){\n        const imageURL = URL.createObjectURL(image.photo);\n        return(\n          <div onClick={(e) => this.onClickThumbnail(image)} className=\"item\" key={image.photoId}>\n            <img className=\"ui small rounded centered image\" src={imageURL} alt=\"\" style={{ marginBottom: '5px' }}/>\n              <div className=\"description\" >{image.uploadStatus === 'uploaded' ? 'Uploaded!' : 'Not Uploaded'}</div>\n          </div>\n        );\n      };\n      return <div></div>;\n    });\n  }\n\n  render(){\n    return(\n      <div>\n        <Modal\n          show={this.state.showModal}\n          title={this.state.image.name}\n          image={this.state.showImage}\n          actions={this.renderActions()}\n          onDismiss={() => this.setState({ showModal: 'none' })}\n        />\n        <h2>{this.props.category.title}</h2>\n        <h3>{this.props.category.description}</h3>\n        <Camera onSubmit={this.onAddPhoto}/>\n        <h3>Photos: {this.state.imageQty}</h3>\n        <div className=\"ui huge horizontal selection celled list\" style={{ marginBottom: '60px'}}>\n          {this.renderList()}\n        </div>\n        <Footer links={[\n          { path: `/${this.props.currentJob}/categories`, id:'categoryList', label: 'Back' }\n        ]} />\n      </div>\n    );\n  }\n}\n\n//Put category data into category props\nconst mapStateToProps = (state, ownProps) => {\n\n  const currentJobId = state.jobMeta.currentJob;\n  const currentPictureReqs = state.sessions.entities.jobs[currentJobId].pictureReqs;\n  //console.log(state.sessions.entities.pictureReqs[currentPictureReqs].categories);\n  //console.log(ownProps.match.params.id);\n\n  return{\n    category: state.sessions.entities.pictureReqs[currentPictureReqs].categories[ownProps.match.params.id],\n    job: state.sessions.entities.jobs[currentJobId],\n    userName: state.userData,\n    currentJob: currentJobId\n  };\n}\n\n//Enable toast for this component\nconst toastManager = withToastManager(CategoryEdit);\n\nexport default connect(mapStateToProps, { getCategory, addPhoto, updatePhotoQty, updateCatUploadStatus })(toastManager);\n","import React from 'react';\nimport Modal from '../Modal';\nimport { Redirect, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { deleteJob, setJobCounter, setCurrentJob } from '../../actions';\nimport db from '../../database/db';\n\nclass DeleteJob extends React.Component {\n\n  state = { cancel: false, toPath: false }\n\n  //Remove localStorage and indexDB data, redirect to createJob page\n  resetData = async () => {\n    const jobId = this.props.currentJobId;\n    const pictureReq = this.props.currentPictureReq;\n    //console.log(jobId, pictureReq);\n    try{\n      db.table(jobId).clear();\n      this.props.setCurrentJob('');\n      await this.props.deleteJob(jobId, pictureReq);\n    }\n    catch (e){\n      console.log('Table did not clear',e);\n    }\n\n    this.setState({ toPath: true });\n  }\n\n  renderActions(){\n    return(\n      <React.Fragment>\n        <button onClick={async () => await this.resetData()} className=\"ui button negative\">Delete Job</button>\n        <Link to=\"/joblist\" className=\"ui button\">\n          Cancel\n        </Link>\n      </React.Fragment>\n    );\n    /*\n    return(\n      <React.Fragment>\n        <button onClick={() => this.resetData()} className=\"ui button negative\">Delete Job</button>\n        <Link to=\"/joblist\" className=\"ui button\">\n          Cancel\n        </Link>\n      </React.Fragment>\n    );\n    */\n  }\n\n  render(){\n    //console.log(this.state);\n    if (this.state.cancel){\n      return <Redirect to=\"/joblist\"/>\n    }\n    else if (this.state.toPath){\n      return <Redirect to=\"/joblist\"/>\n    }\n\n    return (\n      <div>\n        <Modal\n          title={`Delete Job: ${this.props.currentJob.projectName}`}\n          content='Please ensure all photos are uploaded for this job.  You will lose all the photos for this job.'\n          path='/joblist'\n          actions={this.renderActions()}\n          onDismiss={() => this.setState({ toPath: true })}\n        />\n      </div>\n    );\n  }\n\n};\n\nconst mapStateToProps = (state) => {\n\n  try{\n    if(state.jobMeta.currentJob){\n      const currentJobId = state.jobMeta.currentJob;\n      const currentJobCounter = state.jobMeta.jobCounter;\n      const currentJob = state.sessions.entities.jobs[currentJobId];\n      const currentPictureReq = state.sessions.entities.jobs[currentJobId].pictureReqs;\n\n      return{\n        currentJobId: currentJobId,\n        currentJobCounter: currentJobCounter,\n        currentJob: currentJob,\n        currentPictureReq: currentPictureReq\n      }\n    }\n    else{\n      return{\n        currentJobId: '',\n        currentJobCounter: '',\n        currentJob: '',\n        currentPictureReq: ''\n      }\n    }\n  }\n  catch (e){\n    console.log(e);\n    //Should only be re-direct requests after a delete\n  }\n\n}\n\nexport default connect(mapStateToProps, { deleteJob, setJobCounter, setCurrentJob })(DeleteJob);\n","import React from 'react';\nimport Modal from '../Modal';\nimport { Redirect, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCatUploadStatus } from '../../actions';\n\nimport uploadImage from '../../apis/uploadImage';\nimport db from '../../database/db';\n\nimport { withToastManager } from 'react-toast-notifications';\n\nclass UploadAll extends React.Component {\n\n  state = { cancel: false }\n\n  /*\n  Upload all photos whose uploadStatus is \"False\"\n  1.  Get all photos from db whose uploadStatus is \"False\"\n  2.  For loop upload all of them\n\n  Notes:\n  Show single notification for all uploads.  Show single notification for error, show all failed filenames (eh)\n  */\n\n  //Get photos w/ uploadStatus: notUploaded\n  //call uploadFiles\n  getLocalPhotos = async () => {\n    const localPhotos = await db.table(this.props.currentJob).where('uploadStatus').equals('notUploaded').toArray();\n    //console.log('This is localPhotos: ', localPhotos, localPhotos.length);\n    if(localPhotos.length !== 0){\n      this.uploadFiles(localPhotos);\n    }\n    else{\n      this.toastSettings(`No photos to Upload!`, 'warning');\n      this.setState({ cancel: true });\n    }\n    //this.setState({ toPath: true });\n  }\n\n  //Upload all files\n  uploadFiles = async (localPhotos) => {\n\n    //re-direct back to category list\n    this.setState({ cancel: true });\n\n    let successArray = [];\n    let failArray = [];\n    this.toastSettings(`Uploading Files...`, 'info');\n\n    //for all local photos, try to upload each individually.  Add successes to successArray, failures to failArray\n    for(let i = 0; i<localPhotos.length; i++){\n      try{\n        //Set spinner for category to show user that upload is in progress\n        const tempArray = localPhotos[i].photoId.split('_');\n        const photoCategory = tempArray[0];\n        this.props.updateCatUploadStatus(photoCategory, 'waiting', this.props.pictureReq );\n\n\n        await uploadImage(localPhotos[i].photo);\n        //Get categoryID from photo, add it to successArray\n        this.updateStatusTrue(localPhotos[i].photoId);\n        successArray.push(photoCategory);\n      }\n      catch (e){\n        console.log(e);\n        const tempArray = localPhotos[i].photoId.split('_');\n        failArray.push(tempArray[0]);\n        //console.log('this is failArray: ',failArray);\n      }\n    }\n\n    //console.log(`SuccessArray: ${successArray} \\nFailArray: ${failArray}`);\n    //if there were successful uploads, check if there are any notUploaded photos in category and adjust uploadStatus accordingly\n    if(successArray.length !== 0){\n      this.toastSettings(`Uploaded images!`, 'success');\n      //Only unique Categories\n      const uniqueSuccessCategories = [...new Set(successArray)];\n      this.checkCategoryUploadStatus(uniqueSuccessCategories);\n      //console.log(uniqueCategories);\n    }\n    if (failArray.length !== 0){\n      this.toastSettings(`Some images failed`, 'error');\n      const uniqueFailCategories = [...new Set(failArray)];\n      this.checkCategoryUploadStatus(uniqueFailCategories);\n    }\n  }\n\n  //For all unique categories, checks if there are any photos w/ uploadStatus: notUploaded\n  //If all photos are uploaded for a category, change category upload status.  Else do nothing\n  checkCategoryUploadStatus = async (categoriesArray) => {\n    for(let i = 0; i<categoriesArray.length; i++){\n      try{\n        const localCatPhotosCount = await db.table(this.props.currentJob)\n          .where('uploadStatus').equals('notUploaded')\n          .and((result) => {\n            const tempArray = result.photoId.split('_');\n            return tempArray[0] === `${categoriesArray[i]}`;\n          })\n          .count();\n          //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\n        if(localCatPhotosCount === 0){\n          //Update status\n          //console.log('success');\n          this.props.updateCatUploadStatus(categoriesArray[i], 'success', this.props.pictureReq);\n        }\n        else{\n          //console.log('fail');\n          this.props.updateCatUploadStatus(categoriesArray[i], 'fail', this.props.pictureReq);\n        }\n      }\n      catch (e){\n        console.log(e);\n      }\n    }\n  }\n\n  //Set photo uploadStatus to 'uploaded'\n  updateStatusTrue = async (imageId) => {\n    //console.log('UpdateStatusTrue, state w/ imageId', this.state);\n    await db.table(this.props.currentJob).update(imageId, { uploadStatus: 'uploaded' });\n  }\n\n  //Get category uploadStatus\n  /*\n  getStatus = (imageId) => {\n    return this.props.categories[imageId].catUploadStatus;\n  }\n  */\n\n\n\n  //Helper method:  simplify toast messages\n  toastSettings = (message, status) => {\n    this.props.toastManager.add(message, {\n      appearance: status,\n      autoDismiss: true,\n    });\n  }\n\n  renderActions(){\n    return(\n      <React.Fragment>\n        <button onClick={() => this.getLocalPhotos()} className=\"ui button positive\">Upload</button>\n        <Link to={`${this.props.currentJob}/categories`} className=\"ui button\">\n          Cancel\n        </Link>\n      </React.Fragment>\n    );\n  }\n\n  render(){\n\n    if (this.state.cancel){\n      return <Redirect to={`${this.props.currentJob}/categories`}/>\n    }\n\n    return (\n      <div>\n        <Modal\n          title='Upload local photos'\n          content='Upload all photos that have not been uploaded yet?'\n          path={`${this.props.currentJob}/categories`}\n          actions={this.renderActions()}\n          onDismiss={() => this.setState({ toPath: true })}\n        />\n      </div>\n    );\n  }\n\n};\n\nconst mapStateToProps = (state) => {\n\n  const currentJob = state.jobMeta.currentJob;\n  const currentPictureReqs = state.sessions.entities.jobs[currentJob].pictureReqs;\n\n  return{\n    //categories: Object.values(state.categories),\n    currentJob: currentJob,\n    pictureReq: currentPictureReqs\n  };\n}\n\n//Enable toast for this component\nconst toastManager = withToastManager(UploadAll);\n\nexport default connect(mapStateToProps, { updateCatUploadStatus })(toastManager);\n","/*\r\nJobList - Menu that shows current saved job sessions\r\n\r\nPurpose:\r\nUser can see and edit their current job sessions\r\nSelect a job in order to see categories\r\nSelect jobs to delete\r\nUser can see which jobs still have unsent photos\r\n\r\n*/\r\n\r\n\r\nimport React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\nimport { setCurrentJob, updateJobColor } from '../../actions';\r\nimport db from '../../database/db';\r\n\r\n\r\nclass JobList extends React.Component{\r\n\r\n  state = { toCategories: false, toDelete: false, jobId: '' };\r\n\r\n  componentDidMount(){\r\n    if(!db.isOpen()){\r\n      db.open();\r\n    }\r\n    try{\r\n      for(let i=0; i<this.props.sessionData.length; i++){\r\n        this.checkForPhotoCompletion(this.props.sessionData[i].id);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  checkForPhotoCompletion = async (jobId) => {\r\n    //loop through all existinh job tables and check for any 'norUploaded' photos\r\n    try{\r\n      const uploadedPhotosCount = await db.table(jobId)\r\n        .where('uploadStatus').equals('notUploaded').count();\r\n      const jobPhotosCount = await db.table(jobId).count();\r\n        //console.log('This should be the not uploaded photos: ',localCatPhotosCount);\r\n      if(uploadedPhotosCount === 0 & jobPhotosCount !== 0){\r\n        //all uploaded, go green\r\n        console.log('Green', jobId);\r\n        this.props.updateJobColor(jobId,`rgba(75, 225, 75, 0.2)`);\r\n      }\r\n      else if(uploadedPhotosCount !== 0){\r\n        //some remaining, go red\r\n        this.props.updateJobColor(jobId,`rgba(225, 75, 75, 0.2)`);\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  onJobClick = async (jobId) => {\r\n    //console.log('This is job Id: ',jobId);\r\n    await this.props.setCurrentJob(jobId);\r\n    await this.setState({ toCategories: true, jobId: jobId });\r\n    //console.log('jobId: ',this.state.jobId);\r\n  }\r\n\r\n  onDeleteClick = async (jobId) => {\r\n    await this.props.setCurrentJob(jobId);\r\n    this.setState({ toDelete: true, jobId: jobId });\r\n  }\r\n\r\n  renderList(){\r\n    if(this.props.sessionData){\r\n      //console.log('joblist session data: ',this.props.sessionData);\r\n      return this.props.sessionData.map( job => {\r\n        return(\r\n          <div className='item' key={job.id} style={{\r\n            backgroundColor: `${job.color}` }}>\r\n            <div className=\"right floated middle aligned content\">\r\n              <button className=\"ui negative button\" onClick={() => {this.onDeleteClick(job.id)}}>Delete</button>\r\n            </div>\r\n            <div onClick={() => {this.onJobClick(job.id)}}>\r\n              {job.projectName}\r\n            </div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n\r\n    if(this.state.toCategories){\r\n      return <Redirect to={`/${this.state.jobId}/categories`} />\r\n    }\r\n    else if(this.state.toDelete){\r\n      return <Redirect to={'/delete'} />\r\n    }\r\n    try{\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <div className=\"item\" key='warning' style={{ visibility: this.props.sessionData.length === 10 ? 'visible' : 'hidden' }}>\r\n              Limit 10 jobs.  Delete jobs to make space.\r\n            </div>\r\n            <Link to='/newjob' className=\"item\" key='newJob' style={{ visibility: this.props.sessionData.length === 10 ? 'hidden' : 'visible' }}>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    catch (e){\r\n      return(\r\n        <div>\r\n          <h1>Job List</h1>\r\n          <div className='ui massive celled list'>\r\n            <Link to='/newjob' className=\"item\" key='newJob'>\r\n              <i className='large plus square outline icon'></i>\r\n              <div className='content'>\r\n                New Job\r\n              </div>\r\n            </Link>\r\n            {this.renderList()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  //Check if there are existing jobs.  If not, let joblist be blank\r\n  //_.compact removed undefined values from jobs\r\n  try{\r\n    return{\r\n      userName: state.userData,\r\n      sessionData: _.compact(Object.values(state.sessions.entities.jobs))\r\n    };\r\n  }\r\n  catch (e){\r\n    //console.log(e);\r\n    return{\r\n      userName: state.userData,\r\n    };\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setCurrentJob, updateJobColor })(JobList);\r\n","/*\nSignIn - First menu.  User inputs their username\n\nPurpose:\nUser can see and edit their current job sessions\nSelect a job in order to see categories\nSelect jobs to delete\nUser can see which jobs still have unsent photos\n\n*/\n\n\nimport React from 'react';\n\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { setUsername } from '../../actions';\n\nimport InputForm from '../InputForm';\n\nconst userValidation = value => (value && value.length > 3 ? `You must enter a User Name (Max 3 characters)` : undefined)\n\nclass SignIn extends React.Component{\n\n  state = { toJobList: false };\n\n  componentDidMount(){\n    //if localStorage exists, redirect to /joblist\n    if(!localStorage.getItem(\"state\").includes(`\"sessions\":{}`)){\n      this.setState({ toJobList: true });\n    }\n    else if (!localStorage.getItem(\"state\").includes(`signIn`)){\n      //localStorage has old architecture, delete localStorage\n      localStorage.clear();\n    }\n  }\n\n  onSubmit = (formValues) => {\n    formValues.userName = formValues.userName.toUpperCase();\n    //console.log('Clicked: ',formValues);\n    this.props.setUsername(formValues.userName);\n    this.setState({ toJobList: true });\n  }\n\n  render(){\n\n    if(this.state.toJobList){\n      return <Redirect to='/joblist' />\n    }\n\n    return(\n      <div>\n        <h1 style={{ textAlign: 'center' }}>SolarPix 2.0</h1>\n        <h4 style={{ textAlign: 'center' }}>Please Sign In with your Initials</h4>\n        <InputForm  initialValues={{ key: 'signIn' }} onSubmit={this.onSubmit} fields={\n          [\n            {\n            name: 'userName',\n            label: 'User Initials',\n            component: 'input',\n            key: 'field1',\n            validate: userValidation\n            }\n          ]\n        }\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect(null, { setUsername })(SignIn);\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { uploadAllPhotos, updateUploadStatus } from '../actions';\r\n//import db from '../database/db';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\nimport NetworkDetector from '../HOCs/NetworkDetector';\r\n//import history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\nimport DeleteJob from './pages/DeleteJob';\r\nimport UploadAll from './pages/UploadAll';\r\nimport JobList from './pages/JobList';\r\nimport SignIn from './pages/SignIn';\r\n\r\n\r\n\r\nconst App = (props) => {\r\n\r\n  if(!props.isDisconnected && props.uploadStatus !== 'uploading'){\r\n    //console.log('You have no network connection', props);\r\n    props.updateUploadStatus('uploading');\r\n    props.uploadAllPhotos();\r\n  }\r\n  else if(props.isDisconnected && props.uploadStatus === 'uploading'){\r\n    props.updateUploadStatus('');\r\n  }\r\n\r\n//console.log('ayylmao');\r\n  return (\r\n    <ToastProvider>\r\n      <p>v2.4.1</p>\r\n      <div className=\"ui container\" style={{ marginTop: '10px' }}>\r\n        <HashRouter>\r\n          <div>\r\n            <Route path=\"/newjob\" exact component={CreateJob}/>\r\n            <Route path=\"/:job/categories\" exact component={CategoryList}/>\r\n            <Route path=\"/:job/categories/:id\" exact component={CategoryEdit}/>\r\n            <Route path=\"/delete\" exact component={DeleteJob}/>\r\n            <Route path=\"/upload\" exact component={UploadAll}/>\r\n            <Route path=\"/joblist\" exact component={JobList}/>\r\n            <Route path=\"/\" exact component={SignIn}/>\r\n          </div>\r\n        </HashRouter>\r\n      </div>\r\n    </ToastProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    uploadStatus: state.uploadStatus\r\n  }\r\n}\r\n\r\nconst networkDetector = NetworkDetector(App);\r\n\r\nexport default connect(mapStateToProps, { uploadAllPhotos, updateUploadStatus })(networkDetector);\r\n//export default App;\r\n","import { SET_CURRENTJOB, SET_JOBCOUNTER } from '../actions/types'\n\nconst initialState = {\n  currentJob: '',\n  jobCounter: 0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type){\n    case SET_CURRENTJOB:\n      return { ...state, currentJob: action.payload };\n\n    case SET_JOBCOUNTER:\n      const newCount = state.jobCounter + action.payload;\n      return { ...state, jobCounter: newCount };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport userReducer from './userReducer';\nimport jobReducer from './jobReducer';\nimport categoriesReducer from './categoriesReducer';\nimport pageLocationReducer from './pageLocationReducer';\nimport currentJobReducer from './currentJobReducer';\nimport uploadStatusReducer from './uploadStatusReducer';\n\nconst appReducer = combineReducers({\n  uploadStatus: uploadStatusReducer,\n  userData: userReducer,\n  jobMeta: currentJobReducer,\n  categoryData: categoriesReducer,\n  sessions: jobReducer,\n  form: formReducer,\n  pageLocation: pageLocationReducer\n})\n\n/*\nconst rootReducer = (state, action ) => {\n  if (action.type === 'DELETE_JOB'){\n    state = undefined\n  }\n  return appReducer(state, action)\n}\n*/\n\n//export default rootReducer;\nexport default appReducer;\n","import { UPLOAD_ALLIMAGES_STATUS } from '../actions/types'\n\nexport default (state = {}, action) => {\n  switch (action.type){\n    case UPLOAD_ALLIMAGES_STATUS:\n      let newState = { ...state };\n      newState = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n}\n","import { SET_USERNAME } from '../actions/types'\n\nexport default (state = {}, action) => {\n  switch (action.type){\n    case SET_USERNAME:\n\n      //return { ...state, action.payload };\n\n      let newState = { ...state };\n      newState = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n}\n","import _ from 'lodash';\nimport {\n  READ_TXT_FILE,\n  ENCODE_IMAGE,\n  GET_CATEGORY,\n  GET_LOCALSTORAGE\n} from '../actions/types';\n\n\nexport default (state = {}, action) => {\n  switch (action.type){\n    case READ_TXT_FILE:\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\n    case ENCODE_IMAGE:\n      return { ...state, [action.payload.id]: action.payload };\n    case GET_CATEGORY:\n      return { ...state, [action.payload.id]: action.payload };\n    case GET_LOCALSTORAGE:\n      return { ...state, categories: action.payload };\n    /*\n    case UPDATE_PHOTOQTY:\n      return { ...state, [action.payload.id]: {\n          ...state[action.payload.id],\n          photoQty: action.payload.photoQty\n          //photoQueue: action.payload.photoQueue\n        }\n      };\n    case UPDATE_CATUPLOADSTATUS:\n      return { ...state, [action.payload.id]: {\n        ...state[action.payload.id],\n        catUploadStatus: action.payload.status\n        }\n      };\n    */\n    default:\n      return state;\n  }\n}\n","//import { CREATE_JOBLIST, ADD_JOB } from '../actions/types'\r\n//import _ from 'lodash'\r\nimport {\r\n  CREATE_JOBLIST,\r\n  ADD_JOB,\r\n  DELETE_JOB,\r\n  UPDATE_PHOTOQTY,\r\n  UPDATE_CATUPLOADSTATUS,\r\n  UPDATE_JOBCOLOR\r\n } from '../actions/types'\r\n//import { normalize } from 'normalizr';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOBLIST:\r\n      let newState = { ...state };\r\n      newState = action.payload;\r\n      return newState;\r\n      //return { ...state };\r\n      //return { ...state, ..._.mapKeys(action.payload, 'id') }\r\n    case UPDATE_PHOTOQTY:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].photoQty = action.payload.photoQty;\r\n      return newState;\r\n\r\n    case DELETE_JOB:\r\n      //Do I even need to do this w/ lodash?\r\n      newState = { ...state };\r\n      /*\r\n      Doesn't work for some reason.  Supposed to completely remove from object\r\n      _.omit(newState.entities.jobs, action.payload.jobId);\r\n      _.omit(newState.entities.pictureReqs, action.payload.pictureReq);\r\n      */\r\n      newState.entities.jobs[action.payload.jobId] = undefined;\r\n      newState.entities.pictureReqs[action.payload.pictureReq] = undefined;\r\n      return newState;\r\n\r\n    case ADD_JOB:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId] = action.payload.jobData;\r\n      newState.entities.pictureReqs[action.payload.pictureReqId] = action.payload.pictureReqData;\r\n      return newState;\r\n\r\n    case UPDATE_CATUPLOADSTATUS:\r\n      newState = { ...state };\r\n      //Normalizr was supposed to make these easier?!?!\r\n      newState.entities.pictureReqs[action.payload.photoReq].categories[action.payload.categoryId].catUploadStatus = action.payload.status;\r\n      return newState;\r\n\r\n    case UPDATE_JOBCOLOR:\r\n      newState = { ...state };\r\n      newState.entities.jobs[action.payload.jobId].color = action.payload.color;\r\n      return newState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\n  SAVE_PAGELOCATION\n} from '../actions/types';\n\n\nexport default (state = {}, action) => {\n  switch (action.type){\n    case SAVE_PAGELOCATION:\n      return { ...state, yValue: action.payload };\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      //onupdatefound, listens for statechange event; fired if installing property acquires a new service worker\n      registration.onupdatefound = () => {\n        //installing, returns a service worker whose .state property is installing\n        const installingWorker = registration.installing;\n        //If there's no service worker, exit\n        if (installingWorker == null) {\n          return;\n        }\n        //onstatechange, fired anytime .state property changes\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//Import boilerplate (third party)\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { offline } from '@redux-offline/redux-offline';\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\n//import Dexie from 'dexie';\n//Import local files (main components)\nimport App from './components/App';\nimport reducers from './reducers';\nimport { getLocalStorage, setLocalStorage } from './localStorage';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst persistedState = getLocalStorage();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst store = createStore(\n  reducers,\n  persistedState,\n  composeEnhancers(\n    applyMiddleware(reduxThunk),\n    offline(offlineConfig)\n  )\n);\n\n//Need to save state anytime the store state changes\nstore.subscribe(() => {\n  setLocalStorage({\n    userData: store.getState().userData,\n    sessions: store.getState().sessions,\n    jobMeta: store.getState().jobMeta,\n    db: store.getState().db\n    //categories: store.getState().categories\n\n  });\n});\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App/>\n  </Provider>,\n  document.querySelector('#root')\n);\n\nserviceWorker.register();\n","//Gets state from localStorage\nexport const getLocalStorage = () => {\n  //console.log('This is the action', localCategories);\n  try {\n    const localState = localStorage.getItem('state');\n    if (localState === null) {\n      return undefined;\n    }\n    return JSON.parse(localState);\n  }catch (err) {\n    return undefined;\n  }\n}\n\n//Saves state to localStorage\nexport const setLocalStorage = (state) => {\n  try{\n    const localState = JSON.stringify(state);\n    localStorage.setItem('state', localState);\n  }catch (err) {\n    //write something\n  }\n}\n\n\n//Paste this command into console to check localStorage size.\n/*\nvar _lsTotal=0,_xLen,_x;for(_x in localStorage){ if(!localStorage.hasOwnProperty(_x)){continue;} _xLen= ((localStorage[_x].length + _x.length)* 2);_lsTotal+=_xLen; console.log(_x.substr(0,50)+\" = \"+ (_xLen/1024).toFixed(2)+\" KB\")};console.log(\"Total = \" + (_lsTotal / 1024).toFixed(2) + \" KB\");\n*/\n","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_install.013c1ab2.bin\";","module.exports = __webpack_public_path__ + \"static/media/categoryListFile_pcsv.3f3de481.bin\";"],"sourceRoot":""}