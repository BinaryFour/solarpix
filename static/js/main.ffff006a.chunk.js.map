{"version":3,"sources":["categoryListFile","history.js","apis/files.js","components/InputForm.js","components/pages/CreateJob.js","actions/index.js","actions/types.js","components/pages/CategoryList.js","components/Camera.js","components/pages/CategoryEdit.js","components/App.js","reducers/newJobReducer.js","reducers/index.js","reducers/dummyReducer.js","reducers/textFileReducer.js","reducers/getCategoryReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","createHistory","basename","process","axios","create","baseURL","InputForm","renderInput","_ref","label","input","meta","className","concat","error","touched","react_default","a","createElement","Object","assign","autoComplete","_this","renderError","renderDropdown","_ref2","props","value","onSubmit","formValues","_ref3","this","handleSubmit","Field","name","component","React","Component","reduxForm","form","validate","errors","userName","projectName","profileName","CreateJob","createNewJob","components_InputForm","initialValues","connect","dispatch","type","payload","profile","CategoryList","readTextFile","categoryListFile","categories","map","category","Link","to","id","key","title","description","renderList","state","values","textFile","asyncToGenerator","regenerator_default","mark","_callee","categoryArray","counter","wrap","_context","prev","next","files","get","sent","data","split","forEach","tempArray","obj","push","stop","_x","apply","arguments","Camera","accept","placeholder","CategoryEdit","onClick","console","log","onAddPhotoClick","genDummyValues","_this2","dummyValues","photo","components_Camera","ownProps","getCategory","getState","App","style","marginTop","HashRouter","Route","path","exact","INITIAL_STATE","combineReducers","length","undefined","action","objectSpread","_","mapKeys","formReducer","newJob","defineProperty","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.ffff006a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/categoryListFile.7893b230.bin\";","import createHistory from 'history/createBrowserHistory';\r\n\r\nexport default createHistory({basename: process.env.PUBLIC_URL});\r\n","import axios from 'axios';\r\n\r\n//TODO change baseURL to actual URL when app is hosted\r\nexport default axios.create({\r\n  baseURL:  'https://binaryfour.github.io'\r\n});\r\n","/*\r\nInputForm - Re-usable menu/form\r\n\r\nPurpose:\r\nProvides a form template to be used in the app.\r\n2 input bars\r\n1 dropdown\r\n1 Button\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport {Field, reduxForm } from 'redux-form';\r\n\r\n\r\nclass InputForm extends React.Component{\r\n\r\n  //Helper method: renderError\r\n  //Handles when to display an error message\r\n  renderError({ error, touched }){\r\n    if (touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Helper method: renderInput\r\n  //renders an input InputBar.  Depending on error message criteria, show error style\r\n  renderInput = ({label, input, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return (\r\n      <div className={className}>\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: This is a poor implementation for re-usability, make dropdown dynamic/props from parent\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE IN CreateJob.js!!!\r\n  //renders a dropdown menu\r\n  renderDropdown = ({label, input, meta}, props) => {\r\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\r\n    return(\r\n      <div className={className} >\r\n        <label>{label}</label>\r\n        <select {...input}>\r\n          <option value=\"solar\">Solar</option>\r\n          <option value=\"site-audit\">Site-Audit</option>\r\n        </select>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Run onClick when user clicks on button\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  }\r\n\r\n  //Render page layout\r\n  render(){\r\n    return(\r\n      <form className=\"ui form error\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"userName\" label=\"User Name\" component={this.renderInput}/>\r\n        <Field name=\"projectName\" label=\"Project Name\" component={this.renderInput}/>\r\n        <Field name=\"profileName\" label=\"Profile\" component={this.renderDropdown}/>\r\n        <br/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//Helper method: validate\r\n//Used for validation\r\n/*\r\nUser Name or Project Name cannot be blank\r\n\r\n*/\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  if (!formValues.userName){\r\n    errors.userName = 'You must enter a User Name';\r\n  }\r\n  if (!formValues.projectName){\r\n    errors.projectName = 'You must enter a Project Name';\r\n  }\r\n  if (!formValues.profileName){\r\n    errors.profileName = 'You must select a Profile';\r\n  }\r\n\r\n  return errors;\r\n\r\n}\r\n\r\n//Wire up ReduxForm\r\nexport default reduxForm({\r\n  form: 'inputForm',\r\n  validate\r\n})(InputForm);\r\n","/*\r\nCreateJob - First menu that shows to user.\r\n\r\nPurpose:\r\nUser inputs User Name, Project Name, and Profile.\r\nWhen user clicks 'submit', all three variables are saved onto the store.  User is presented with CategoryList\r\n\r\n*/\r\n\r\n//import necessary packages\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createNewJob } from '../../actions';\r\n//Import local components\r\nimport InputForm from '../InputForm';\r\nimport history from '../../history';\r\n\r\nclass CreateJob extends React.Component{\r\n\r\n  //Callback function to InputForm\r\n  //On form Submit, save formValues to store and navigate user to categories list\r\n  onSubmit = (formValues) => {\r\n    this.props.createNewJob(formValues);\r\n    //history.push('/#/categories');\r\n  }\r\n\r\n  //Render page layout\r\n  //IF YOU WANT TO CHANGE THE DEFAULT VALUE FOR DROPDOWN, CHANGE initialValues Prop!!!\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>SolarPix 2.0</h1>\r\n        <InputForm onSubmit={this.onSubmit} initialValues={{profileName: 'solar'}}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { createNewJob })(CreateJob);\r\n","import files from '../apis/files';\r\nimport history from '../history';\r\n//types.js just has action name/types for easier bug catching\r\nimport {\r\n  CREATE_JOB,\r\n  READ_TXT_FILE,\r\n  GEN_DUMMY,\r\n  GET_CATEGORY\r\n} from './types';\r\n\r\n//Submit button saves NewJob data and navigates user to category list\r\nexport const createNewJob = (userName, projectName, profileName) => dispatch => {\r\n  /*\r\n  return{\r\n    type: CREATE_JOB,\r\n    payload: {\r\n      userName: userName,\r\n      projectName: projectName,\r\n      profile: profileName\r\n    }\r\n  }\r\n  */\r\n  dispatch({ type: CREATE_JOB, payload: {userName: userName, projectName: projectName, profile: profileName }});\r\n  //history.push(`${process.env.PUBLIC_URL}/categories`);\r\n  //history.push('/categories');\r\n}\r\n\r\n/*\r\n//Reads text file\r\nexport const readTextFile = (textFile) => {\r\n  var rawFile = new XMLHttpRequest();\r\n  rawFile.open(\"GET\", textFile, true);\r\n\r\n\r\n  return{\r\n    type: READ_TXT_FILE,\r\n    payload: 'asdf'\r\n  }\r\n}\r\n*/\r\n\r\n//Reads text file using axios.\r\n//Waits for response before dispatching action\r\n//Splits response into objects with proper properties\r\nexport const readTextFile = (textFile) => async dispatch => {\r\n    var categoryArray = [];\r\n    var counter = 0;\r\n    //get categories file from component\r\n    const response = await files.get(textFile);\r\n    //create array of strings\r\n    var textArray = response.data.split(/\\n/);\r\n    //For each String, split string into id/title/description properties\r\n    //id generated by counter (dynamic for categorylist future proofing)\r\n    textArray.forEach( category => {\r\n      //For some reason there's a blank category/newline in the textFile, filter w/ category\r\n      if(category){\r\n        var tempArray = category.split(\"|\");\r\n        var obj = { id:counter, title:tempArray[0], description: tempArray[1]};\r\n        categoryArray.push(obj);\r\n        counter += 1;\r\n      }\r\n    });\r\n    //console.log(categoryArray);\r\n    dispatch({ type: READ_TXT_FILE, payload: categoryArray })\r\n}\r\n\r\n//Gets individual category data from store\r\nexport const getCategory = (id) => (dispatch, getState) => {\r\n  const category = getState().categories[id];\r\n  //console.log(category);\r\n\r\n  dispatch({ type: GET_CATEGORY, payload: category });\r\n}\r\n\r\n//Dev action creator, unnecessary\r\n//Provides dummy values (set up before getting readTextFile wired)\r\nexport const genDummyValues = () => {\r\n  return{\r\n    type: GEN_DUMMY,\r\n    payload:\r\n      [\r\n        {id:0, title:'Category 1', description: 'a1'},\r\n        {id:1, title:'Category 2', description: 'a2'},\r\n        {id:2, title:'Category 3', description: 'a3'},\r\n        {id:3, title:'Category 1', description: 'a1'},\r\n        {id:4, title:'Category 2', description: 'a2'},\r\n        {id:5, title:'Category 3', description: 'a3'},\r\n        {id:6, title:'Category 1', description: 'a1'},\r\n        {id:7, title:'Category 2', description: 'a2'},\r\n        {id:8, title:'Category 3', description: 'a3'},\r\n        {id:9, title:'Category 1', description: 'a1'},\r\n        {id:10, title:'Category 2', description: 'a2'},\r\n        {id:11, title:'Category 3', description: 'a3'}\r\n      ]\r\n  }\r\n}\r\n","export const CREATE_JOB = 'CREATE_JOB';\r\nexport const READ_TXT_FILE = 'READ_TXT_FILE';\r\nexport const FORMAT_CATEGORY_LIST = 'FORMAT_CATEGORY_LIST';\r\nexport const GEN_DUMMY = 'GEN_DUMMY';\r\nexport const GET_CATEGORY = 'GET_CATEGORY';\r\n","/*\r\nCategoryList - Main working menu that shows categories\r\n\r\nPurpose:\r\nUser clicks category in order to open their mobile camera.\r\nUser can choose to upload(?) photos\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nimport categoryListFile from '../../categoryListFile';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { readTextFile } from '../../actions';\r\n\r\nclass CategoryList extends React.Component{\r\n\r\n  //Call readTextFile action creator to get Array of category objects in 'categories'\r\n  componentDidMount(){\r\n    this.props.readTextFile(categoryListFile);\r\n  }\r\n\r\n  //Renders list of categories and sets each to be a link to individual category page\r\n  renderList() {\r\n    return this.props.categories.map( category => {\r\n      return(\r\n        <Link to={`/categories/${category.id}`} className=\"item\" key={category.id}>\r\n          <i className=\"large middle aligned icon camera\" />\r\n          <div className=\"content\">\r\n            {category.title}\r\n            <div className=\"description\">{category.description}</div>\r\n          </div>\r\n        </Link>\r\n      );\r\n    });\r\n  }\r\n\r\n  //Render component calling renderList\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <div className=\"ui celled list\">{this.renderList()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    categories: Object.values(state.categories)\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { readTextFile })(CategoryList);\r\n","import React from 'react';\r\n\r\nconst Camera = () => {\r\n\r\n  return(\r\n    <div className=\"ui labeled big input\">\r\n      <div className=\"ui label\">\r\n        Add photo\r\n      </div>\r\n      <input type=\"file\" accept=\"image/*;capture=camera\" placeholder=\"Add Photo\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Camera;\r\n","/*\r\nCategoryEdit - Individual Category look\r\n\r\nPurpose:\r\nUser able to take photos and edit existing photos for this category.\r\n\r\n*/\r\n\r\n/*\r\n// TODO:\r\nDONE: Get category information from store\r\nCreate a \"photo\" object array that contains all the photos for each category based on id and get it into component from store\r\nrender all existing photos as thumbnails (as they exist)\r\nrender a 'New Photo' button that calls the mobile camera\r\nSeparate rows of photos for User-Friendliness\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCategory, genDummyValues } from '../../actions';\r\n\r\nimport Camera from '../Camera';\r\n\r\n//import categoryListFile from '../../categoryListFile';\r\n\r\nclass CategoryEdit extends React.Component {\r\n\r\n  //Fetch the category data from store\r\n  componentDidMount(){\r\n    this.props.genDummyValues();\r\n    //this.props.getCategory(this.props.match.params.id);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //modal options (re-take or delete)\r\n  onClick = (id) => {\r\n    console.log(`user clicked existing image: ${id}`);\r\n  }\r\n\r\n  //When user clicks on existing photo, open modal\r\n  //modal options (re-take or delete)\r\n  onAddPhotoClick = (id) => {\r\n    console.log(`user clicked Add Photo`);\r\n  }\r\n\r\n  //renders the list of existing images\r\n  renderList() {\r\n    return this.props.dummyValues.map( photo => {\r\n      return(\r\n        <div onClick={this.onClick(photo.id)} className=\"item\" key={photo.id}>\r\n          <i className=\"large right aligned icon file image\" />\r\n          <div className=\"content\">\r\n            {photo.title}\r\n            <div className=\"description\">{photo.description}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h3>CategoryTitle</h3>\r\n        <div className=\"ui huge horizontal selection celled list\">\r\n          {this.renderList()}\r\n        </div>\r\n        <Camera />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Put category data into category props\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return{\r\n    //category: state.categories[ownProps.match.params.id],\r\n    dummyValues: Object.values(state.dummyValues)\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, { getCategory, genDummyValues })(CategoryEdit);\r\n","/*\r\nApp\r\n\r\nSets up history and routing for components.\r\n\r\n*/\r\n\r\nimport React from 'react';\r\n//Import history.  May have to change this based on Host site\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport history from '../history';\r\n//Import local components\r\nimport CreateJob from './pages/CreateJob';\r\nimport CategoryList from './pages/CategoryList';\r\nimport CategoryEdit from './pages/CategoryEdit';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"ui container\" style={{ marginTop: '10px'}}>\r\n      <HashRouter>\r\n        <div>\r\n          //<Route path={`${process.env.PUBLIC_URL}/`} exact component={CreateJob}/>\r\n          //<Route path={`${process.env.PUBLIC_URL}/categories`} exact component={CategoryList}/>\r\n          //<Route path={`${process.env.PUBLIC_URL}/categories/:id`} exact component={CategoryEdit}/>\r\n          <Route path=\"/\" exact component={CreateJob}/>\r\n          <Route path=\"/categories\" exact component={CategoryList}/>\r\n          <Route path=\"/categories/:id\" exact component={CategoryEdit}/>\r\n        </div>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { CREATE_JOB } from '../actions/types'\r\n\r\nconst INITIAL_STATE = {\r\n  userName: null,\r\n  projectName: null,\r\n  profileName: null\r\n}\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type){\r\n    case CREATE_JOB:\r\n      return { ...state,\r\n        userName: action.payload.userName,\r\n        projectName: action.payload.projectName,\r\n        profileName: action.payload.profileName\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport dummyReducer from './dummyReducer';\r\n\r\nimport newJobReducer from './newJobReducer';\r\nimport textFileReducer from './textFileReducer';\r\nimport getCategoryReducer from './getCategoryReducer';\r\n\r\nexport default combineReducers({\r\n  dummyValues: dummyReducer,\r\n  form: formReducer,\r\n  newJob: newJobReducer,\r\n  categories: textFileReducer,\r\n  category: getCategoryReducer\r\n})\r\n","import { GEN_DUMMY } from '../actions/types';\r\nimport _ from 'lodash';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case GEN_DUMMY:\r\n    console.log()\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { READ_TXT_FILE } from '../actions/types';\r\nimport _ from 'lodash';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case READ_TXT_FILE:\r\n    console.log()\r\n      return { ...state, ..._.mapKeys(action.payload, 'id')};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_CATEGORY } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type){\r\n    case GET_CATEGORY:\r\n    console.log()\r\n      return { ...state, [action.payload.id]: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//Import boilerplate (third party)\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\n//Import local files (main components)\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}